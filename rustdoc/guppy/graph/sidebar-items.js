initSidebarItems({"enum":[["BuildTargetId","An identifier for a build target within a package."],["BuildTargetKind","The type of build target (library or binary)."],["DependencyDirection","The direction in which to follow dependencies."],["EnabledTernary","Whether a dependency or feature is enabled on a specific platform."],["PackageSource","The source of a package."],["PlatformStatus","The status of a dependency or feature, which is possibly platform-dependent."]],"mod":[["cargo","Simulations of Cargo behavior."],["feature","Graph analysis for individual features within a package."],["summaries","Generate build summaries from `CargoSet` instances."]],"struct":[["BuildTarget","A build target in a package."],["Cycles","Contains information about dependency cycles."],["DependencyReq","Information about a specific kind of dependency (normal, build or dev) from a package to another package."],["DependsCache","An optional cache used to speed up `depends_on` queries."],["DotWrite","A write target for `Dot` graphs. Use with the `write!` macro."],["EnabledStatus","Whether a dependency or feature is required, optional, or disabled."],["PackageGraph","A graph of packages and dependencies between them, parsed from metadata returned by `cargo metadata`."],["PackageLink","Represents a dependency from one package to another."],["PackageMetadata","Information about a specific package in a `PackageGraph`."],["PackageQuery","A query over a package graph."],["PackageSet","A set of resolved packages in a package graph."],["PlatformEval","An evaluator for platform-specific dependencies."],["Prop010Resolver","A randomly generated package resolver."],["Workspace","Information about a workspace, parsed from metadata returned by `cargo metadata`."]],"trait":[["PackageDotVisitor","A visitor used for formatting `dot` graphs."],["PackageResolver","Represents whether a particular link within a package graph should be followed during a resolve operation."]]});