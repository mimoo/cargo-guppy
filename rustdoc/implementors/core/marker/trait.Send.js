(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Send for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Send for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Match","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Send for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Send for Searcher","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Send for Prefix","synthetic":true,"types":[]},{"text":"impl Send for Infix","synthetic":true,"types":[]},{"text":"impl Send for Suffix","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Colour","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["ascii"] = [{"text":"impl Send for ToAsciiCharError","synthetic":true,"types":[]},{"text":"impl Send for AsciiStr","synthetic":true,"types":[]},{"text":"impl Send for AsAsciiStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for AsciiString","synthetic":true,"types":[]},{"text":"impl&lt;O&gt; Send for FromAsciiError&lt;O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AsciiChar","synthetic":true,"types":[]}];
implementors["atty"] = [{"text":"impl Send for Stream","synthetic":true,"types":[]}];
implementors["bit_set"] = [{"text":"impl&lt;B&gt; Send for BitSet&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for Iter&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for Union&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for Intersection&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for Difference&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for SymmetricDifference&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bit_vec"] = [{"text":"impl&lt;B&gt; Send for BitVec&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for Iter&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for IntoIter&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Send for Blocks&lt;'a, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bitmaps"] = [{"text":"impl&lt;Size&gt; Send for Bitmap&lt;Size&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Size as Bits&gt;::Store: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Size&gt; Send for Iter&lt;'a, Size&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Size as Bits&gt;::Store: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl Send for BStr","synthetic":true,"types":[]},{"text":"impl Send for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Send for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Utf8Chunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Utf8Chunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ByteRecords&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["bytesize"] = [{"text":"impl Send for ByteSize","synthetic":true,"types":[]}];
implementors["cargo"] = [{"text":"impl Send for CommitInfo","synthetic":true,"types":[]},{"text":"impl Send for CfgInfo","synthetic":true,"types":[]},{"text":"impl Send for VersionInfo","synthetic":true,"types":[]},{"text":"impl Send for InternedString","synthetic":true,"types":[]},{"text":"impl Send for PackageIdSpec","synthetic":true,"types":[]},{"text":"impl !Send for Resolve","synthetic":true,"types":[]},{"text":"impl Send for SourceId","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'cfg&gt; !Send for Members&lt;'a, 'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for Workspace&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl Send for WorkspaceRootConfig","synthetic":true,"types":[]},{"text":"impl Send for ResolveVersion","synthetic":true,"types":[]},{"text":"impl Send for GitReference","synthetic":true,"types":[]},{"text":"impl Send for WorkspaceConfig","synthetic":true,"types":[]},{"text":"impl Send for BuildConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'cfg&gt; !Send for BuildContext&lt;'a, 'cfg&gt;","synthetic":true,"types":[]},{"text":"impl Send for FileType","synthetic":true,"types":[]},{"text":"impl Send for RustcTargetData","synthetic":true,"types":[]},{"text":"impl Send for TargetInfo","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for Compilation&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Doctest","synthetic":true,"types":[]},{"text":"impl Send for CompileTarget","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'cfg&gt; !Send for Context&lt;'a, 'cfg&gt;","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl Send for BuildOutput","synthetic":true,"types":[]},{"text":"impl Send for BuildScriptOutputs","synthetic":true,"types":[]},{"text":"impl Send for BuildScripts","synthetic":true,"types":[]},{"text":"impl !Send for Unit","synthetic":true,"types":[]},{"text":"impl !Send for UnitInterner","synthetic":true,"types":[]},{"text":"impl Send for DefaultExecutor","synthetic":true,"types":[]},{"text":"impl Send for CompileMode","synthetic":true,"types":[]},{"text":"impl Send for MessageFormat","synthetic":true,"types":[]},{"text":"impl Send for FileFlavor","synthetic":true,"types":[]},{"text":"impl Send for CompileKind","synthetic":true,"types":[]},{"text":"impl Send for CrateType","synthetic":true,"types":[]},{"text":"impl Send for Freshness","synthetic":true,"types":[]},{"text":"impl Send for RustdocExternMap","synthetic":true,"types":[]},{"text":"impl Send for RustdocExternMode","synthetic":true,"types":[]},{"text":"impl !Send for UnitDep","synthetic":true,"types":[]},{"text":"impl !Send for Dependency","synthetic":true,"types":[]},{"text":"impl Send for DepKind","synthetic":true,"types":[]},{"text":"impl Send for Features","synthetic":true,"types":[]},{"text":"impl Send for Feature","synthetic":true,"types":[]},{"text":"impl Send for CliUnstable","synthetic":true,"types":[]},{"text":"impl Send for Edition","synthetic":true,"types":[]},{"text":"impl !Send for Manifest","synthetic":true,"types":[]},{"text":"impl Send for DelayedWarning","synthetic":true,"types":[]},{"text":"impl Send for Warnings","synthetic":true,"types":[]},{"text":"impl !Send for VirtualManifest","synthetic":true,"types":[]},{"text":"impl Send for ManifestMetadata","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl !Send for EitherManifest","synthetic":true,"types":[]},{"text":"impl Send for TargetKind","synthetic":true,"types":[]},{"text":"impl Send for TargetSourcePath","synthetic":true,"types":[]},{"text":"impl !Send for Package","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for PackageSet&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'cfg&gt; !Send for Downloads&lt;'a, 'cfg&gt;","synthetic":true,"types":[]},{"text":"impl Send for PackageId","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PackageIdStableHash&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Profiles","synthetic":true,"types":[]},{"text":"impl Send for Profile","synthetic":true,"types":[]},{"text":"impl Send for UnitFor","synthetic":true,"types":[]},{"text":"impl Send for ProfileRoot","synthetic":true,"types":[]},{"text":"impl Send for Lto","synthetic":true,"types":[]},{"text":"impl Send for PanicStrategy","synthetic":true,"types":[]},{"text":"impl Send for Strip","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for PackageRegistry&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl Send for EncodableDependency","synthetic":true,"types":[]},{"text":"impl Send for EncodablePackageId","synthetic":true,"types":[]},{"text":"impl Send for EncodableResolve","synthetic":true,"types":[]},{"text":"impl Send for ResolveError","synthetic":true,"types":[]},{"text":"impl !Send for ResolveOpts","synthetic":true,"types":[]},{"text":"impl Send for ActivateError","synthetic":true,"types":[]},{"text":"impl Send for ResolveBehavior","synthetic":true,"types":[]},{"text":"impl Send for ResolvedFeatures","synthetic":true,"types":[]},{"text":"impl !Send for RequestedFeatures","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'cfg&gt; !Send for FeatureResolver&lt;'a, 'cfg&gt;","synthetic":true,"types":[]},{"text":"impl Send for HasDevUnits","synthetic":true,"types":[]},{"text":"impl Send for ForceAllTargets","synthetic":true,"types":[]},{"text":"impl Send for FeaturesFor","synthetic":true,"types":[]},{"text":"impl !Send for Shell","synthetic":true,"types":[]},{"text":"impl Send for Verbosity","synthetic":true,"types":[]},{"text":"impl Send for ColorChoice","synthetic":true,"types":[]},{"text":"impl&lt;'src&gt; !Send for SourceMap&lt;'src&gt;","synthetic":true,"types":[]},{"text":"impl !Send for MaybePackage","synthetic":true,"types":[]},{"text":"impl !Send for Summary","synthetic":true,"types":[]},{"text":"impl Send for FeatureValue","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CleanOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompileOptions","synthetic":true,"types":[]},{"text":"impl Send for DocOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for FetchOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for UpdateOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NewOptions","synthetic":true,"types":[]},{"text":"impl !Send for ExportInfo","synthetic":true,"types":[]},{"text":"impl Send for OutputMetadataOptions","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for PackageOpts&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl Send for TestOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FixOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for HttpTimeout","synthetic":true,"types":[]},{"text":"impl Send for OwnersOptions","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for PublishOpts&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegistryConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VendorOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompileFilter","synthetic":true,"types":[]},{"text":"impl Send for FilterRule","synthetic":true,"types":[]},{"text":"impl Send for LibRule","synthetic":true,"types":[]},{"text":"impl Send for Packages","synthetic":true,"types":[]},{"text":"impl Send for VersionControl","synthetic":true,"types":[]},{"text":"impl Send for TreeOptions","synthetic":true,"types":[]},{"text":"impl Send for EdgeKind","synthetic":true,"types":[]},{"text":"impl Send for Node","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for Charset","synthetic":true,"types":[]},{"text":"impl Send for Prefix","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for GitSource&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for SourceConfigMap&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for DirectorySource&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for GitCheckout&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GitDatabase","synthetic":true,"types":[]},{"text":"impl Send for GitRemote","synthetic":true,"types":[]},{"text":"impl Send for GitRevision","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for PathSource&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for RegistrySource&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegistryConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for RegistryPackage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for MaybeLock","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for ReplacedSource&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl Send for CanonicalUrl","synthetic":true,"types":[]},{"text":"impl&lt;N, E, V&gt; Send for DependencyQueue&lt;N, E, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FileLock","synthetic":true,"types":[]},{"text":"impl Send for Filesystem","synthetic":true,"types":[]},{"text":"impl Send for StableHasher","synthetic":true,"types":[]},{"text":"impl Send for LockServer","synthetic":true,"types":[]},{"text":"impl Send for LockServerClient","synthetic":true,"types":[]},{"text":"impl Send for LockServerStarted","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for Progress&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Queue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Sha256","synthetic":true,"types":[]},{"text":"impl Send for FossilRepo","synthetic":true,"types":[]},{"text":"impl Send for GitRepo","synthetic":true,"types":[]},{"text":"impl Send for HgRepo","synthetic":true,"types":[]},{"text":"impl Send for PijulRepo","synthetic":true,"types":[]},{"text":"impl Send for ProgressStyle","synthetic":true,"types":[]},{"text":"impl Send for ProfileChecking","synthetic":true,"types":[]},{"text":"impl Send for CommandInfo","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Value&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ConfigRelativePath","synthetic":true,"types":[]},{"text":"impl Send for PathAndArgs","synthetic":true,"types":[]},{"text":"impl Send for TargetCfgConfig","synthetic":true,"types":[]},{"text":"impl Send for TargetConfig","synthetic":true,"types":[]},{"text":"impl !Send for Config","synthetic":true,"types":[]},{"text":"impl Send for ConfigError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for PackageCacheLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CargoHttpConfig","synthetic":true,"types":[]},{"text":"impl Send for SslVersionConfigRange","synthetic":true,"types":[]},{"text":"impl Send for CargoNetConfig","synthetic":true,"types":[]},{"text":"impl Send for CargoBuildConfig","synthetic":true,"types":[]},{"text":"impl Send for StringList","synthetic":true,"types":[]},{"text":"impl Send for Definition","synthetic":true,"types":[]},{"text":"impl Send for ConfigValue","synthetic":true,"types":[]},{"text":"impl Send for SslVersionConfig","synthetic":true,"types":[]},{"text":"impl Send for State","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiagnosticPrinter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RustfixDiagnosticServer","synthetic":true,"types":[]},{"text":"impl Send for StartedServer","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for HttpNot200","synthetic":true,"types":[]},{"text":"impl Send for VerboseError","synthetic":true,"types":[]},{"text":"impl Send for InternalError","synthetic":true,"types":[]},{"text":"impl Send for ManifestError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ManifestCauses&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ProcessError","synthetic":true,"types":[]},{"text":"impl Send for CargoTestError","synthetic":true,"types":[]},{"text":"impl Send for CliError","synthetic":true,"types":[]},{"text":"impl Send for Test","synthetic":true,"types":[]},{"text":"impl&lt;N, E&gt; !Send for Graph&lt;N, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FromCompiler&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Artifact&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ArtifactProfile","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BuildScript&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TimingInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BuildFinished","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Retry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PathAncestors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ProcessBuilder","synthetic":true,"types":[]},{"text":"impl Send for Profiler","synthetic":true,"types":[]},{"text":"impl Send for Rustc","synthetic":true,"types":[]},{"text":"impl Send for DetailedTomlDependency","synthetic":true,"types":[]},{"text":"impl Send for TomlManifest","synthetic":true,"types":[]},{"text":"impl Send for TomlProfiles","synthetic":true,"types":[]},{"text":"impl Send for TomlOptLevel","synthetic":true,"types":[]},{"text":"impl Send for TomlProfile","synthetic":true,"types":[]},{"text":"impl Send for StringOrVec","synthetic":true,"types":[]},{"text":"impl Send for TomlProject","synthetic":true,"types":[]},{"text":"impl Send for TomlWorkspace","synthetic":true,"types":[]},{"text":"impl Send for TomlDependency","synthetic":true,"types":[]},{"text":"impl Send for U32OrBool","synthetic":true,"types":[]},{"text":"impl Send for ProfilePackageSpec","synthetic":true,"types":[]},{"text":"impl Send for StringOrBool","synthetic":true,"types":[]},{"text":"impl Send for VecStringOrBool","synthetic":true,"types":[]}];
implementors["cargo_compare"] = [{"text":"impl Send for CargoCompare","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for GlobalContext&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Send for CheckOpts","synthetic":true,"types":[]},{"text":"impl Send for GuppyCargoCommon","synthetic":true,"types":[]},{"text":"impl Send for FeatureMap","synthetic":true,"types":[]},{"text":"impl Send for DiffOpts","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for TargetHostDiff&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for FeatureDiff&lt;'g&gt;","synthetic":true,"types":[]}];
implementors["cargo_guppy"] = [{"text":"impl Send for QueryOptions","synthetic":true,"types":[]},{"text":"impl Send for BaseFilterOptions","synthetic":true,"types":[]},{"text":"impl Send for FilterOptions","synthetic":true,"types":[]},{"text":"impl Send for MvOptions","synthetic":true,"types":[]},{"text":"impl Send for DiffSummariesOptions","synthetic":true,"types":[]},{"text":"impl Send for DupsOptions","synthetic":true,"types":[]},{"text":"impl Send for ResolveCargoOptions","synthetic":true,"types":[]},{"text":"impl Send for CmdSelectOptions","synthetic":true,"types":[]},{"text":"impl Send for SubtreeSizeOptions","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for BuildKind","synthetic":true,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl Send for Dependency","synthetic":true,"types":[]},{"text":"impl Send for Artifact","synthetic":true,"types":[]},{"text":"impl Send for ArtifactProfile","synthetic":true,"types":[]},{"text":"impl Send for BuildFinished","synthetic":true,"types":[]},{"text":"impl Send for BuildScript","synthetic":true,"types":[]},{"text":"impl Send for CompilerMessage","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MessageIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PackageId","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl Send for Resolve","synthetic":true,"types":[]},{"text":"impl Send for Node","synthetic":true,"types":[]},{"text":"impl Send for NodeDep","synthetic":true,"types":[]},{"text":"impl Send for DepKindInfo","synthetic":true,"types":[]},{"text":"impl Send for Package","synthetic":true,"types":[]},{"text":"impl Send for Source","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for MetadataCommand","synthetic":true,"types":[]},{"text":"impl Send for DependencyKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for CargoOpt","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticCode","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticSpanLine","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticSpanMacroExpansion","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticSpan","synthetic":true,"types":[]},{"text":"impl Send for Diagnostic","synthetic":true,"types":[]},{"text":"impl Send for Applicability","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticLevel","synthetic":true,"types":[]}];
implementors["cargo_platform"] = [{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for Cfg","synthetic":true,"types":[]},{"text":"impl Send for CfgExpr","synthetic":true,"types":[]},{"text":"impl Send for ParseErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Platform","synthetic":true,"types":[]}];
implementors["cfg_expr"] = [{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for Reason","synthetic":true,"types":[]},{"text":"impl Send for Expression","synthetic":true,"types":[]},{"text":"impl Send for Func","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TargetPredicate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Predicate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Lexer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LexerToken&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Token&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Arch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Vendor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Os&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TargetInfo&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Endian","synthetic":true,"types":[]},{"text":"impl Send for Family","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Send for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Send for ParseMonthError","synthetic":true,"types":[]},{"text":"impl Send for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Send for RoundingError","synthetic":true,"types":[]},{"text":"impl Send for Weekday","synthetic":true,"types":[]},{"text":"impl Send for Month","synthetic":true,"types":[]},{"text":"impl Send for FixedOffset","synthetic":true,"types":[]},{"text":"impl Send for Local","synthetic":true,"types":[]},{"text":"impl Send for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NaiveDate","synthetic":true,"types":[]},{"text":"impl Send for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Send for IsoWeek","synthetic":true,"types":[]},{"text":"impl Send for NaiveTime","synthetic":true,"types":[]},{"text":"impl Send for Parsed","synthetic":true,"types":[]},{"text":"impl Send for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Send for InternalFixed","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Pad","synthetic":true,"types":[]},{"text":"impl Send for Numeric","synthetic":true,"types":[]},{"text":"impl Send for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl&lt;'a, 'b&gt; !Send for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for AppSettings","synthetic":true,"types":[]},{"text":"impl Send for ArgSettings","synthetic":true,"types":[]},{"text":"impl Send for Shell","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]}];
implementors["combine"] = [{"text":"impl&lt;I, R, P&gt; Send for Errors&lt;I, R, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Stream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; Send for Info&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; Send for Error&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Tracked&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, R&gt; Send for Info&lt;T, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Consumed&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnexpectedParse","synthetic":true,"types":[]},{"text":"impl Send for StringStreamError","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for FastResult&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for PartialStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for SliceStream&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IteratorStream&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadStream&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for PointerOffset","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for BufferedStream&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Position: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, X&gt; Send for State&lt;I, X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IndexPositioner","synthetic":true,"types":[]},{"text":"impl Send for SourcePosition","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Digit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Space&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Spaces&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Newline&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CrLf&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Tab&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Upper&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Lower&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AlphaNum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Letter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for OctDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for HexDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Bytes&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, I&gt; Send for BytesCmp&lt;C, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TakeUntilByte&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TakeUntilByte2&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TakeUntilByte3&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for take_until_bytes&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; Send for U16&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; Send for U32&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; Send for U64&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; Send for I16&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; Send for I32&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; Send for I64&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; Send for F32&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B, I&gt; Send for F64&lt;B, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Digit&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Space&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Spaces&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Newline&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CrLf&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Tab&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Upper&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Lower&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for AlphaNum&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Letter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for OctDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for HexDigit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Str&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, I&gt; Send for StrCmp&lt;C, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Choice&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P1, P2&gt; Send for Or&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Optional&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for NotFollowedBy&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Try&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for LookAhead&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; Send for Map&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; Send for FlatMap&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; Send for AndThen&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; Send for Recognize&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for NoPartial&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Ignore&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Send for AnyPartialState","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for AnyPartialStateParser&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AnySendPartialState","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for AnySendPartialStateParser&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Lazy&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, R&gt; Send for Factory&lt;P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, P&gt; Send for FromStr&lt;O, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, I, O, S&gt; Send for Opaque&lt;F, I, O, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for Unexpected&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Message&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Parser&gt;::Input: StreamOnce,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Expected&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Parser&gt;::Input: StreamOnce,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Silent&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FnParser&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, I, T&gt; Send for EnvParser&lt;E, I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Any&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Satisfy&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for SatisfyMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Token&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T, I&gt; Send for Tokens&lt;C, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, T, I&gt; Send for Tokens2&lt;C, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Position&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Send for OneOf&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, I&gt; Send for NoneOf&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for Value&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Eof&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Range&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for Recognize&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for RecognizeWithValue&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Take&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for TakeWhile&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for TakeWhile1&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for TakeUntilRange&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Range: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, I&gt; Send for TakeFn&lt;F, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TakeRange","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; Send for Count&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SkipCount&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; Send for CountMinMax&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SkipCountMinMax&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P, S, M&gt; Send for Iter&lt;'a, P, S, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as Parser&gt;::Input: Send + StreamOnce,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; Send for Many&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; Send for Many1&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SkipMany&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SkipMany1&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; Send for SepBy&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; Send for SepBy1&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; Send for SepEndBy&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P, S&gt; Send for SepEndBy1&lt;F, P, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Op&gt; Send for Chainl1&lt;P, Op&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Op: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Op&gt; Send for Chainr1&lt;P, Op&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Op: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, P&gt; Send for TakeUntil&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Send for SkipUntil&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for EscapedState&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Q&gt; Send for Escaped&lt;P, Q&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Q: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as Parser&gt;::Input as StreamOnce&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for PartialState1&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for PartialState2&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C&gt; Send for PartialState3&lt;A, B, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; Send for PartialState4&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E&gt; Send for PartialState5&lt;A, B, C, D, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F&gt; Send for PartialState6&lt;A, B, C, D, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G&gt; Send for PartialState7&lt;A, B, C, D, E, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H&gt; Send for PartialState8&lt;A, B, C, D, E, F, G, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I&gt; Send for PartialState9&lt;A, B, C, D, E, F, G, H, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J&gt; Send for PartialState10&lt;A, B, C, D, E, F, G, H, I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K&gt; Send for PartialState11&lt;A, B, C, D, E, F, G, H, I, J, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D, E, F, G, H, I, J, K, L&gt; Send for PartialState12&lt;A, B, C, D, E, F, G, H, I, J, K, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P1, P2&gt; Send for With&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P1, P2&gt; Send for Skip&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;L, R, P&gt; Send for Between&lt;L, R, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; Send for Then&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, F&gt; Send for ThenPartial&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["console"] = [{"text":"impl Send for Term","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TermFeatures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for Emoji&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Send for StyledObject&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for AnsiCodeIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for TermFamily","synthetic":true,"types":[]},{"text":"impl Send for TermTarget","synthetic":true,"types":[]},{"text":"impl Send for Alignment","synthetic":true,"types":[]},{"text":"impl Send for Attribute","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]}];
implementors["crates_io"] = [{"text":"impl Send for Registry","synthetic":true,"types":[]},{"text":"impl Send for Crate","synthetic":true,"types":[]},{"text":"impl Send for NewCrate","synthetic":true,"types":[]},{"text":"impl Send for NewCrateDependency","synthetic":true,"types":[]},{"text":"impl Send for User","synthetic":true,"types":[]},{"text":"impl Send for Warnings","synthetic":true,"types":[]},{"text":"impl Send for Auth","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Send for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryReadyError","synthetic":true,"types":[]},{"text":"impl Send for TrySelectError","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Send for Select&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Send for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Worker&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Send for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Send for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Send for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable + Send + Sync&gt; Send for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl Send for Backoff","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Send for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Send for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Parker","synthetic":false,"types":[]},{"text":"impl Send for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Send for ScopedJoinHandle&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["crypto_hash"] = [{"text":"impl Send for Hasher","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]}];
implementors["curl"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for FormError","synthetic":true,"types":[]},{"text":"impl Send for MultiError","synthetic":true,"types":[]},{"text":"impl Send for ShareError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Protocols&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Form","synthetic":true,"types":[]},{"text":"impl&lt;'form, 'data&gt; !Send for Part&lt;'form, 'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for Easy","synthetic":true,"types":[]},{"text":"impl&lt;'easy, 'data&gt; !Send for Transfer&lt;'easy, 'data&gt;","synthetic":true,"types":[]},{"text":"impl Send for Auth","synthetic":true,"types":[]},{"text":"impl Send for SslOpt","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; Send for Easy2&lt;H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for NetRc","synthetic":true,"types":[]},{"text":"impl Send for ProxyType","synthetic":true,"types":[]},{"text":"impl Send for HttpVersion","synthetic":true,"types":[]},{"text":"impl Send for IpResolve","synthetic":true,"types":[]},{"text":"impl Send for SslVersion","synthetic":true,"types":[]},{"text":"impl Send for TimeCondition","synthetic":true,"types":[]},{"text":"impl Send for InfoType","synthetic":true,"types":[]},{"text":"impl Send for ReadError","synthetic":true,"types":[]},{"text":"impl Send for SeekResult","synthetic":true,"types":[]},{"text":"impl Send for WriteError","synthetic":true,"types":[]},{"text":"impl !Send for Multi","synthetic":true,"types":[]},{"text":"impl&lt;'multi&gt; !Send for Message&lt;'multi&gt;","synthetic":true,"types":[]},{"text":"impl !Send for EasyHandle","synthetic":true,"types":[]},{"text":"impl&lt;H&gt; !Send for Easy2Handle&lt;H&gt;","synthetic":true,"types":[]},{"text":"impl Send for Events","synthetic":true,"types":[]},{"text":"impl Send for SocketEvents","synthetic":true,"types":[]},{"text":"impl Send for WaitFd","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":false,"types":[]},{"text":"impl Send for List","synthetic":false,"types":[]}];
implementors["curl_sys"] = [{"text":"impl !Send for curl_fileinfo","synthetic":true,"types":[]},{"text":"impl !Send for curl_forms","synthetic":true,"types":[]},{"text":"impl !Send for curl_slist","synthetic":true,"types":[]},{"text":"impl !Send for curl_certinfo","synthetic":true,"types":[]},{"text":"impl !Send for curl_version_info_data","synthetic":true,"types":[]},{"text":"impl !Send for CURLMsg","synthetic":true,"types":[]},{"text":"impl Send for curl_waitfd","synthetic":true,"types":[]},{"text":"impl Send for curl_sockaddr","synthetic":true,"types":[]},{"text":"impl Send for CURL","synthetic":true,"types":[]},{"text":"impl Send for curl_httppost","synthetic":true,"types":[]},{"text":"impl Send for CURLSH","synthetic":true,"types":[]},{"text":"impl Send for CURLM","synthetic":true,"types":[]}];
implementors["determinator"] = [{"text":"impl&lt;'g, 'a&gt; Send for Determinator&lt;'g, 'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for DeterminatorSet&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Send for Paths0","synthetic":true,"types":[]},{"text":"impl Send for RulesError","synthetic":true,"types":[]},{"text":"impl Send for RulesErrorKind","synthetic":true,"types":[]},{"text":"impl Send for DeterminatorRules","synthetic":true,"types":[]},{"text":"impl Send for PathRule","synthetic":true,"types":[]},{"text":"impl Send for PackageRule","synthetic":true,"types":[]},{"text":"impl Send for DeterminatorPostRule","synthetic":true,"types":[]},{"text":"impl Send for DeterminatorMarkChanged","synthetic":true,"types":[]},{"text":"impl Send for PathMatch","synthetic":true,"types":[]},{"text":"impl Send for RuleIndex","synthetic":true,"types":[]}];
implementors["dialoguer"] = [{"text":"impl Send for Editor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Confirm&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Input&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for MultiSelect&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Password&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Sort&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SimpleTheme","synthetic":true,"types":[]},{"text":"impl Send for ColorfulTheme","synthetic":true,"types":[]}];
implementors["difference"] = [{"text":"impl Send for Changeset","synthetic":true,"types":[]},{"text":"impl Send for Difference","synthetic":true,"types":[]}];
implementors["diffus"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for Edit&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diffable&lt;'a&gt;&gt;::Diff: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, Diff&gt; Send for Edit&lt;'a, T, Diff&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Diff: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized, Diff&gt; Send for Edit&lt;'a, T, Diff&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Diff: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for Edit&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Diffable&lt;'a&gt;&gt;::Diff: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for Edit&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Edit","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Send for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; Send for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Logger","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for WriteStyle","synthetic":true,"types":[]},{"text":"impl Send for Filter","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl !Send for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Formatter","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for TimestampPrecision","synthetic":true,"types":[]}];
implementors["filetime"] = [{"text":"impl Send for FileTime","synthetic":true,"types":[]}];
implementors["fixedbitset"] = [{"text":"impl Send for FixedBitSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Difference&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SymmetricDifference&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Intersection&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Union&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Ones&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["fixture_manager"] = [{"text":"impl Send for FixtureManager","synthetic":true,"types":[]},{"text":"impl Send for GenerateSummariesOpts","synthetic":true,"types":[]},{"text":"impl Send for GenerateSummariesMode","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; !Send for GenerateSummaryContext&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Send for SummaryPair","synthetic":true,"types":[]}];
implementors["fixtures"] = [{"text":"impl&lt;'a&gt; Send for DirectionDesc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FixtureDetails","synthetic":true,"types":[]},{"text":"impl Send for PackageDetails","synthetic":true,"types":[]},{"text":"impl Send for LinkDetails","synthetic":true,"types":[]},{"text":"impl Send for PlatformResults","synthetic":true,"types":[]},{"text":"impl Send for JsonFixture","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Send for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GzBuilder","synthetic":true,"types":[]},{"text":"impl Send for GzHeader","synthetic":true,"types":[]},{"text":"impl Send for Compress","synthetic":true,"types":[]},{"text":"impl Send for CompressError","synthetic":true,"types":[]},{"text":"impl Send for Decompress","synthetic":true,"types":[]},{"text":"impl Send for DecompressError","synthetic":true,"types":[]},{"text":"impl Send for Compression","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for FlushCompress","synthetic":true,"types":[]},{"text":"impl Send for FlushDecompress","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Send for FnvHasher","synthetic":true,"types":[]}];
implementors["foreign_types_shared"] = [{"text":"impl Send for Opaque","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["git2"] = [{"text":"impl&lt;'cb&gt; !Send for ApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Blame&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; !Send for BlameHunk&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'blame&gt; !Send for BlameIter&lt;'blame&gt;","synthetic":true,"types":[]},{"text":"impl Send for BlameOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Blob&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for BlobWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Branch&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Branches&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Buf","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for CherrypickOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Commit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'commit, 'repo&gt; !Send for Parents&lt;'commit, 'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for ConfigEntries&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cfg&gt; !Send for ConfigEntry&lt;'cfg&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Cred","synthetic":true,"types":[]},{"text":"impl Send for CredentialHelper","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Describe&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for DescribeFormatOptions","synthetic":true,"types":[]},{"text":"impl !Send for DescribeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'diff&gt; !Send for Deltas&lt;'diff&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffDelta&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for DiffOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffBinaryFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for DiffFindOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffHunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for DiffLine&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for DiffStats","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl Send for IndexConflict","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; !Send for IndexConflicts&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'index&gt; !Send for IndexEntries&lt;'index&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexEntry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Progress&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'odb&gt; !Send for Mempack&lt;'odb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for AnnotatedCommit&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for MergeOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Note&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Notes&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Object&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Odb&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for OdbObject&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for OdbPackwriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for OdbReader&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for OdbWriter&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl Send for Oid","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for PackBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Pathspec","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; !Send for PathspecFailedEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ps&gt; !Send for PathspecMatchList&lt;'ps&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; !Send for PathspecDiffEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'list&gt; !Send for PathspecEntries&lt;'list&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ProxyOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Rebase&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'rebase&gt; !Send for RebaseOperation&lt;'rebase&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for RebaseOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Reference&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'references&gt; !Send for ReferenceNames&lt;'repo, 'references&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for References&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Reflog","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; !Send for ReflogEntry&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'reflog&gt; !Send for ReflogIter&lt;'reflog&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; !Send for Refspec&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for FetchOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for PushOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; !Send for Refspecs&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Remote&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo, 'connection, 'cb&gt; !Send for RemoteConnection&lt;'repo, 'connection, 'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'remote&gt; !Send for RemoteHead&lt;'remote&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RemoteCallbacks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RepositoryInitOptions","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for RevertOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Revspec&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Revwalk&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Signature&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for StashApplyOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; !Send for StatusEntry&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'statuses&gt; !Send for StatusIter&lt;'statuses&gt;","synthetic":true,"types":[]},{"text":"impl !Send for StatusOptions","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Statuses&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Submodule&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for SubmoduleUpdateOptions&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Tag&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexTime","synthetic":true,"types":[]},{"text":"impl Send for Time","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for Tree&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; !Send for TreeEntry&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'tree&gt; !Send for TreeIter&lt;'tree&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; !Send for TreeBuilder&lt;'repo&gt;","synthetic":true,"types":[]},{"text":"impl Send for Sort","synthetic":true,"types":[]},{"text":"impl Send for CredentialType","synthetic":true,"types":[]},{"text":"impl Send for IndexEntryFlag","synthetic":true,"types":[]},{"text":"impl Send for IndexEntryExtendedFlag","synthetic":true,"types":[]},{"text":"impl Send for IndexAddOption","synthetic":true,"types":[]},{"text":"impl Send for RepositoryOpenFlags","synthetic":true,"types":[]},{"text":"impl Send for RevparseMode","synthetic":true,"types":[]},{"text":"impl Send for MergeAnalysis","synthetic":true,"types":[]},{"text":"impl Send for MergePreference","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for RepositoryInitMode","synthetic":true,"types":[]},{"text":"impl Send for SubmoduleStatus","synthetic":true,"types":[]},{"text":"impl Send for PathspecFlags","synthetic":true,"types":[]},{"text":"impl Send for CheckoutNotificationType","synthetic":true,"types":[]},{"text":"impl Send for DiffStatsFormat","synthetic":true,"types":[]},{"text":"impl Send for StashApplyFlags","synthetic":true,"types":[]},{"text":"impl Send for StashFlags","synthetic":true,"types":[]},{"text":"impl Send for AttrCheckFlags","synthetic":true,"types":[]},{"text":"impl Send for DiffFlags","synthetic":true,"types":[]},{"text":"impl Send for ReferenceFormat","synthetic":true,"types":[]},{"text":"impl Send for ApplyLocation","synthetic":true,"types":[]},{"text":"impl Send for DiffBinaryKind","synthetic":true,"types":[]},{"text":"impl Send for PackBuilderStage","synthetic":true,"types":[]},{"text":"impl Send for RebaseOperationType","synthetic":true,"types":[]},{"text":"impl Send for StatusShow","synthetic":true,"types":[]},{"text":"impl Send for TreeWalkMode","synthetic":true,"types":[]},{"text":"impl Send for TreeWalkResult","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for ErrorClass","synthetic":true,"types":[]},{"text":"impl Send for RepositoryState","synthetic":true,"types":[]},{"text":"impl Send for Direction","synthetic":true,"types":[]},{"text":"impl Send for ResetType","synthetic":true,"types":[]},{"text":"impl Send for ObjectType","synthetic":true,"types":[]},{"text":"impl Send for ReferenceType","synthetic":true,"types":[]},{"text":"impl Send for BranchType","synthetic":true,"types":[]},{"text":"impl Send for ConfigLevel","synthetic":true,"types":[]},{"text":"impl Send for FileFavor","synthetic":true,"types":[]},{"text":"impl Send for Delta","synthetic":true,"types":[]},{"text":"impl Send for FileMode","synthetic":true,"types":[]},{"text":"impl Send for SubmoduleIgnore","synthetic":true,"types":[]},{"text":"impl Send for DiffFormat","synthetic":true,"types":[]},{"text":"impl Send for AutotagOption","synthetic":true,"types":[]},{"text":"impl Send for FetchPrune","synthetic":true,"types":[]},{"text":"impl Send for StashApplyProgress","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for RepoBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'cb&gt; !Send for CheckoutBuilder&lt;'cb&gt;","synthetic":true,"types":[]},{"text":"impl Send for CloneLocal","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CertHostkey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CertX509&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for OidArray","synthetic":true,"types":[]},{"text":"impl !Send for StringArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for IterBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Transport","synthetic":true,"types":[]},{"text":"impl Send for Service","synthetic":true,"types":[]},{"text":"impl&lt;'repo&gt; Send for Diff&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'buffers&gt; Send for Patch&lt;'buffers&gt;","synthetic":false,"types":[]},{"text":"impl Send for Repository","synthetic":false,"types":[]}];
implementors["glob"] = [{"text":"impl Send for Paths","synthetic":true,"types":[]},{"text":"impl Send for GlobError","synthetic":true,"types":[]},{"text":"impl Send for PatternError","synthetic":true,"types":[]},{"text":"impl Send for Pattern","synthetic":true,"types":[]},{"text":"impl Send for MatchOptions","synthetic":true,"types":[]}];
implementors["globset"] = [{"text":"impl Send for Glob","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GlobBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GlobMatcher","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for GlobSet","synthetic":true,"types":[]},{"text":"impl Send for GlobSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Candidate&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]}];
implementors["guppy"] = [{"text":"impl Send for MetadataCommand","synthetic":true,"types":[]},{"text":"impl Send for CargoMetadata","synthetic":true,"types":[]},{"text":"impl Send for PackageId","synthetic":true,"types":[]},{"text":"impl Send for DependencyKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for FeatureGraphWarning","synthetic":true,"types":[]},{"text":"impl Send for FeatureBuildStage","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for DotWrite&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for BuildTarget&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for Cycles&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Send for PackageGraph","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for DependsCache&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for Workspace&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for PackageMetadata&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for PackageLink&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for DependencyReq&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for EnabledStatus&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for PlatformEval&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Send for Prop010Resolver","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for PackageQuery&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for PackageSet&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for BuildTargetId&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for BuildTargetKind&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for PackageSource&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for PlatformStatus&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Send for EnabledTernary","synthetic":true,"types":[]},{"text":"impl Send for DependencyDirection","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CargoOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for CargoSet&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Send for CargoResolverVersion","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for Cycles&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for FeatureGraph&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for FeatureId&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for FeatureMetadata&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for CrossLink&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FeatureFilterFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for FeatureQuery&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for FeatureSet&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl Send for FeatureType","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for FeatureList&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g&gt; Send for IntoIter&lt;'g&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, 'a&gt; Send for Iter&lt;'g, 'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, 'a&gt; Send for DisplayFeatures&lt;'g, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CargoOptionsSummary","synthetic":true,"types":[]}];
implementors["guppy_cmdlib"] = [{"text":"impl Send for PackagesAndFeatures","synthetic":true,"types":[]},{"text":"impl Send for CargoResolverOpts","synthetic":true,"types":[]},{"text":"impl Send for CargoMetadataOptions","synthetic":true,"types":[]}];
implementors["guppy_summaries"] = [{"text":"impl&lt;M&gt; Send for SummaryWithMetadata&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SummaryId","synthetic":true,"types":[]},{"text":"impl Send for PackageInfo","synthetic":true,"types":[]},{"text":"impl Send for SummarySource","synthetic":true,"types":[]},{"text":"impl Send for PackageStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for SummaryReport&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SummaryDiff&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PackageDiff&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SummaryDiffStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SummaryDiffTag","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Send for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryReserveError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RawIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for RawIterHash&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Send for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilderMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawVacantEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DefaultHashBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Send for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bucket&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RawTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RawIntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Send for RawDrain&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send, '_&gt; Send for IterMut&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S, '_&gt; Send for RawOccupiedEntryMut&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S, '_&gt; Send for OccupiedEntry&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Send for FromHexError","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl Send for FormattedDuration","synthetic":true,"types":[]},{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl Send for Rfc3339Timestamp","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Errors","synthetic":true,"types":[]}];
implementors["ignore"] = [{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for Walk","synthetic":true,"types":[]},{"text":"impl Send for WalkBuilder","synthetic":true,"types":[]},{"text":"impl Send for WalkParallel","synthetic":true,"types":[]},{"text":"impl Send for WalkState","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Match&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Glob","synthetic":true,"types":[]},{"text":"impl Send for Gitignore","synthetic":true,"types":[]},{"text":"impl Send for GitignoreBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Glob&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Override","synthetic":true,"types":[]},{"text":"impl Send for OverrideBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Glob&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FileTypeDef","synthetic":true,"types":[]},{"text":"impl Send for Types","synthetic":true,"types":[]},{"text":"impl Send for TypesBuilder","synthetic":true,"types":[]}];
implementors["im_rc"] = [{"text":"impl&lt;K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for HashMap&lt;K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, S&nbsp;=&nbsp;RandomState&gt; !Send for HashSet&lt;A, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Send for OrdMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for OrdSet&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for Vector&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for ConsumingIter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for DiffIter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Send for DiffItem&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Send for OrdMapPool&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for DiffIter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for DiffItem&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for OrdSetPool&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for RangedIter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for ConsumingIter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for DiffIter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; !Send for HashMapPool&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !Send for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !Send for VacantEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for ConsumingIter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !Send for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; !Send for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for HashSetPool&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for ConsumingIter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for RRBPool&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Iter&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for IterMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; !Send for ConsumingIter&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Chunks&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for ChunksMut&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for Focus&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; !Send for FocusMut&lt;'a, A&gt;","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Send for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Send for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Send for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; Send for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Send for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Send for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; Send for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Send for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Send for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Send for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Send for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Send for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Send for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["jobserver"] = [{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl Send for Acquired","synthetic":true,"types":[]},{"text":"impl Send for HelperThread","synthetic":true,"types":[]}];
implementors["lazycell"] = [{"text":"impl&lt;T&gt; Send for LazyCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for AtomicLazyCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl Send for sched_param","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Send for arpreq","synthetic":true,"types":[]},{"text":"impl Send for arpreq_old","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl !Send for mmsghdr","synthetic":true,"types":[]},{"text":"impl Send for epoll_event","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for rlimit64","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for spwd","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Send for itimerspec","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl Send for packet_mreq","synthetic":true,"types":[]},{"text":"impl Send for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl Send for msginfo","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for input_event","synthetic":true,"types":[]},{"text":"impl Send for input_id","synthetic":true,"types":[]},{"text":"impl Send for input_absinfo","synthetic":true,"types":[]},{"text":"impl Send for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Send for input_mask","synthetic":true,"types":[]},{"text":"impl Send for ff_replay","synthetic":true,"types":[]},{"text":"impl Send for ff_trigger","synthetic":true,"types":[]},{"text":"impl Send for ff_envelope","synthetic":true,"types":[]},{"text":"impl Send for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Send for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_effect","synthetic":true,"types":[]},{"text":"impl !Send for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Send for ucred","synthetic":true,"types":[]},{"text":"impl !Send for mntent","synthetic":true,"types":[]},{"text":"impl !Send for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Send for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Send for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for arpd_request","synthetic":true,"types":[]},{"text":"impl Send for inotify_event","synthetic":true,"types":[]},{"text":"impl Send for fanotify_response","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for dirent64","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Send for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Send for mq_attr","synthetic":true,"types":[]},{"text":"impl Send for statx","synthetic":true,"types":[]},{"text":"impl Send for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl Send for __exit_status","synthetic":true,"types":[]},{"text":"impl Send for __timeval","synthetic":true,"types":[]},{"text":"impl !Send for glob64_t","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for mallinfo","synthetic":true,"types":[]},{"text":"impl Send for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Send for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Send for nlattr","synthetic":true,"types":[]},{"text":"impl !Send for rtentry","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl Send for sigset_t","synthetic":true,"types":[]},{"text":"impl Send for sysinfo","synthetic":true,"types":[]},{"text":"impl Send for msqid_ds","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl Send for flock64","synthetic":true,"types":[]},{"text":"impl Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for stat64","synthetic":true,"types":[]},{"text":"impl Send for statfs64","synthetic":true,"types":[]},{"text":"impl Send for statvfs64","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Send for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Send for user","synthetic":true,"types":[]},{"text":"impl !Send for mcontext_t","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for termios2","synthetic":true,"types":[]},{"text":"impl Send for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Send for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for sem_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]},{"text":"impl Send for fpos64_t","synthetic":true,"types":[]}];
implementors["libgit2_sys"] = [{"text":"impl !Send for git_revspec","synthetic":true,"types":[]},{"text":"impl !Send for git_error","synthetic":true,"types":[]},{"text":"impl Send for git_oid","synthetic":true,"types":[]},{"text":"impl !Send for git_strarray","synthetic":true,"types":[]},{"text":"impl !Send for git_oidarray","synthetic":true,"types":[]},{"text":"impl !Send for git_signature","synthetic":true,"types":[]},{"text":"impl Send for git_time","synthetic":true,"types":[]},{"text":"impl !Send for git_clone_options","synthetic":true,"types":[]},{"text":"impl !Send for git_checkout_options","synthetic":true,"types":[]},{"text":"impl Send for git_checkout_perfdata","synthetic":true,"types":[]},{"text":"impl Send for git_indexer_progress","synthetic":true,"types":[]},{"text":"impl !Send for git_remote_callbacks","synthetic":true,"types":[]},{"text":"impl !Send for git_fetch_options","synthetic":true,"types":[]},{"text":"impl !Send for git_push_update","synthetic":true,"types":[]},{"text":"impl Send for git_cert","synthetic":true,"types":[]},{"text":"impl Send for git_cert_hostkey","synthetic":true,"types":[]},{"text":"impl !Send for git_cert_x509","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_file","synthetic":true,"types":[]},{"text":"impl !Send for git_status_options","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_delta","synthetic":true,"types":[]},{"text":"impl !Send for git_status_entry","synthetic":true,"types":[]},{"text":"impl !Send for git_buf","synthetic":true,"types":[]},{"text":"impl Send for git_blame_options","synthetic":true,"types":[]},{"text":"impl !Send for git_blame_hunk","synthetic":true,"types":[]},{"text":"impl !Send for git_index_entry","synthetic":true,"types":[]},{"text":"impl Send for git_index_time","synthetic":true,"types":[]},{"text":"impl !Send for git_config_entry","synthetic":true,"types":[]},{"text":"impl !Send for git_submodule_update_options","synthetic":true,"types":[]},{"text":"impl Send for git_writestream","synthetic":true,"types":[]},{"text":"impl Send for git_cred","synthetic":true,"types":[]},{"text":"impl !Send for git_push_options","synthetic":true,"types":[]},{"text":"impl !Send for git_repository_init_options","synthetic":true,"types":[]},{"text":"impl !Send for git_remote_head","synthetic":true,"types":[]},{"text":"impl Send for git_diff_hunk","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_line","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_options","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_find_options","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_similarity_metric","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_format_email_options","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_binary","synthetic":true,"types":[]},{"text":"impl !Send for git_diff_binary_file","synthetic":true,"types":[]},{"text":"impl !Send for git_merge_options","synthetic":true,"types":[]},{"text":"impl Send for git_transport","synthetic":true,"types":[]},{"text":"impl !Send for git_odb_backend","synthetic":true,"types":[]},{"text":"impl !Send for git_odb_writepack","synthetic":true,"types":[]},{"text":"impl Send for git_refdb_backend","synthetic":true,"types":[]},{"text":"impl !Send for git_proxy_options","synthetic":true,"types":[]},{"text":"impl !Send for git_smart_subtransport_stream","synthetic":true,"types":[]},{"text":"impl Send for git_smart_subtransport","synthetic":true,"types":[]},{"text":"impl !Send for git_smart_subtransport_definition","synthetic":true,"types":[]},{"text":"impl !Send for git_describe_options","synthetic":true,"types":[]},{"text":"impl !Send for git_describe_format_options","synthetic":true,"types":[]},{"text":"impl !Send for git_stash_apply_options","synthetic":true,"types":[]},{"text":"impl !Send for git_rebase_options","synthetic":true,"types":[]},{"text":"impl !Send for git_rebase_operation","synthetic":true,"types":[]},{"text":"impl !Send for git_cherrypick_options","synthetic":true,"types":[]},{"text":"impl !Send for git_apply_options","synthetic":true,"types":[]},{"text":"impl Send for git_blob","synthetic":true,"types":[]},{"text":"impl Send for git_branch_iterator","synthetic":true,"types":[]},{"text":"impl Send for git_blame","synthetic":true,"types":[]},{"text":"impl Send for git_commit","synthetic":true,"types":[]},{"text":"impl Send for git_config","synthetic":true,"types":[]},{"text":"impl Send for git_config_iterator","synthetic":true,"types":[]},{"text":"impl Send for git_index","synthetic":true,"types":[]},{"text":"impl Send for git_index_conflict_iterator","synthetic":true,"types":[]},{"text":"impl Send for git_object","synthetic":true,"types":[]},{"text":"impl Send for git_reference","synthetic":true,"types":[]},{"text":"impl Send for git_reference_iterator","synthetic":true,"types":[]},{"text":"impl Send for git_annotated_commit","synthetic":true,"types":[]},{"text":"impl Send for git_refdb","synthetic":true,"types":[]},{"text":"impl Send for git_refspec","synthetic":true,"types":[]},{"text":"impl Send for git_remote","synthetic":true,"types":[]},{"text":"impl Send for git_repository","synthetic":true,"types":[]},{"text":"impl Send for git_revwalk","synthetic":true,"types":[]},{"text":"impl Send for git_submodule","synthetic":true,"types":[]},{"text":"impl Send for git_tag","synthetic":true,"types":[]},{"text":"impl Send for git_tree","synthetic":true,"types":[]},{"text":"impl Send for git_tree_entry","synthetic":true,"types":[]},{"text":"impl Send for git_treebuilder","synthetic":true,"types":[]},{"text":"impl Send for git_push","synthetic":true,"types":[]},{"text":"impl Send for git_note","synthetic":true,"types":[]},{"text":"impl Send for git_note_iterator","synthetic":true,"types":[]},{"text":"impl Send for git_status_list","synthetic":true,"types":[]},{"text":"impl Send for git_pathspec","synthetic":true,"types":[]},{"text":"impl Send for git_pathspec_match_list","synthetic":true,"types":[]},{"text":"impl Send for git_diff","synthetic":true,"types":[]},{"text":"impl Send for git_diff_stats","synthetic":true,"types":[]},{"text":"impl Send for git_patch","synthetic":true,"types":[]},{"text":"impl Send for git_rebase","synthetic":true,"types":[]},{"text":"impl Send for git_reflog","synthetic":true,"types":[]},{"text":"impl Send for git_reflog_entry","synthetic":true,"types":[]},{"text":"impl Send for git_describe_result","synthetic":true,"types":[]},{"text":"impl Send for git_packbuilder","synthetic":true,"types":[]},{"text":"impl Send for git_odb","synthetic":true,"types":[]},{"text":"impl Send for git_odb_stream","synthetic":true,"types":[]},{"text":"impl Send for git_odb_object","synthetic":true,"types":[]},{"text":"impl Send for git_worktree","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]}];
implementors["libnghttp2_sys"] = [{"text":"impl Send for nghttp2_session","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_info","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_vec","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_rcbuf","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_nv","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_frame_hd","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_data_provider","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_data","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_priority_spec","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_headers","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_priority","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_rst_stream","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_settings_entry","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_settings","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_push_promise","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_ping","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_goaway","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_window_update","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_extension","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_session_callbacks","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_mem","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_option","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_ext_altsvc","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_origin_entry","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_ext_origin","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_hd_deflater","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_hd_inflater","synthetic":true,"types":[]},{"text":"impl Send for nghttp2_stream","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_data_source","synthetic":true,"types":[]},{"text":"impl !Send for nghttp2_frame","synthetic":true,"types":[]}];
implementors["libssh2_sys"] = [{"text":"impl Send for libssh2_struct_stat","synthetic":true,"types":[]},{"text":"impl !Send for libssh2_agent_publickey","synthetic":true,"types":[]},{"text":"impl !Send for libssh2_knownhost","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SFTP_ATTRIBUTES","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SFTP_STATVFS","synthetic":true,"types":[]},{"text":"impl !Send for LIBSSH2_USERAUTH_KBDINT_PROMPT","synthetic":true,"types":[]},{"text":"impl !Send for LIBSSH2_USERAUTH_KBDINT_RESPONSE","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SESSION","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_AGENT","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_CHANNEL","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_LISTENER","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_KNOWNHOSTS","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SFTP","synthetic":true,"types":[]},{"text":"impl Send for LIBSSH2_SFTP_HANDLE","synthetic":true,"types":[]}];
implementors["libz_sys"] = [{"text":"impl !Send for gz_header","synthetic":true,"types":[]},{"text":"impl !Send for z_stream","synthetic":true,"types":[]},{"text":"impl Send for gzFile_s","synthetic":true,"types":[]},{"text":"impl Send for internal_state","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send, S:&nbsp;Send&gt; Send for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Send for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["nested"] = [{"text":"impl&lt;T&gt; Send for Nested&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Send for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Send for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Send for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["opener"] = [{"text":"impl Send for OpenError","synthetic":true,"types":[]}];
implementors["openssl"] = [{"text":"impl Send for KeyError","synthetic":true,"types":[]},{"text":"impl Send for AesKey","synthetic":true,"types":[]},{"text":"impl Send for TimeDiff","synthetic":true,"types":[]},{"text":"impl Send for MsbOption","synthetic":true,"types":[]},{"text":"impl Send for CMSOptions","synthetic":true,"types":[]},{"text":"impl !Send for ConfMethod","synthetic":true,"types":[]},{"text":"impl Send for PointConversionForm","synthetic":true,"types":[]},{"text":"impl Send for Asn1Flag","synthetic":true,"types":[]},{"text":"impl !Send for Seal","synthetic":true,"types":[]},{"text":"impl !Send for Open","synthetic":true,"types":[]},{"text":"impl Send for ErrorStack","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DigestBytes","synthetic":true,"types":[]},{"text":"impl Send for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl Send for Nid","synthetic":true,"types":[]},{"text":"impl Send for OcspFlag","synthetic":true,"types":[]},{"text":"impl Send for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl Send for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl Send for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl Send for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl Send for KeyIvPair","synthetic":true,"types":[]},{"text":"impl Send for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl Send for Id","synthetic":true,"types":[]},{"text":"impl Send for Params","synthetic":true,"types":[]},{"text":"impl Send for Public","synthetic":true,"types":[]},{"text":"impl Send for Private","synthetic":true,"types":[]},{"text":"impl Send for Padding","synthetic":true,"types":[]},{"text":"impl Send for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl Send for Sha1","synthetic":true,"types":[]},{"text":"impl Send for Sha224","synthetic":true,"types":[]},{"text":"impl Send for Sha256","synthetic":true,"types":[]},{"text":"impl Send for Sha384","synthetic":true,"types":[]},{"text":"impl Send for Sha512","synthetic":true,"types":[]},{"text":"impl Send for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl Send for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl Send for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl Send for SslAcceptor","synthetic":true,"types":[]},{"text":"impl Send for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl Send for SslConnector","synthetic":true,"types":[]},{"text":"impl Send for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for SslOptions","synthetic":true,"types":[]},{"text":"impl Send for SslMode","synthetic":true,"types":[]},{"text":"impl Send for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl Send for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl Send for ExtensionContext","synthetic":true,"types":[]},{"text":"impl Send for SslFiletype","synthetic":true,"types":[]},{"text":"impl Send for StatusType","synthetic":true,"types":[]},{"text":"impl Send for NameType","synthetic":true,"types":[]},{"text":"impl Send for SniError","synthetic":true,"types":[]},{"text":"impl Send for SslAlert","synthetic":true,"types":[]},{"text":"impl Send for AlpnError","synthetic":true,"types":[]},{"text":"impl Send for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl Send for SslVersion","synthetic":true,"types":[]},{"text":"impl Send for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl Send for CipherBits","synthetic":true,"types":[]},{"text":"impl !Send for SslCipher","synthetic":true,"types":[]},{"text":"impl Send for SslCipherRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for MidHandshakeSslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ShutdownResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for X509Builder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl Send for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl Send for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl Send for BasicConstraints","synthetic":true,"types":[]},{"text":"impl Send for KeyUsage","synthetic":true,"types":[]},{"text":"impl Send for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl Send for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Send for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl Send for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl Send for Asn1GeneralizedTime","synthetic":false,"types":[]},{"text":"impl Send for Asn1GeneralizedTimeRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1Time","synthetic":false,"types":[]},{"text":"impl Send for Asn1TimeRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1String","synthetic":false,"types":[]},{"text":"impl Send for Asn1StringRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1Integer","synthetic":false,"types":[]},{"text":"impl Send for Asn1IntegerRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1BitString","synthetic":false,"types":[]},{"text":"impl Send for Asn1BitStringRef","synthetic":false,"types":[]},{"text":"impl Send for Asn1Object","synthetic":false,"types":[]},{"text":"impl Send for Asn1ObjectRef","synthetic":false,"types":[]},{"text":"impl Send for BigNumContext","synthetic":false,"types":[]},{"text":"impl Send for BigNumContextRef","synthetic":false,"types":[]},{"text":"impl Send for BigNum","synthetic":false,"types":[]},{"text":"impl Send for BigNumRef","synthetic":false,"types":[]},{"text":"impl Send for CmsContentInfo","synthetic":false,"types":[]},{"text":"impl Send for CmsContentInfoRef","synthetic":false,"types":[]},{"text":"impl Send for Conf","synthetic":false,"types":[]},{"text":"impl Send for ConfRef","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Deriver&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Dh&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for DhRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Dsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for DsaRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for EcGroup","synthetic":false,"types":[]},{"text":"impl Send for EcGroupRef","synthetic":false,"types":[]},{"text":"impl Send for EcPoint","synthetic":false,"types":[]},{"text":"impl Send for EcPointRef","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for EcKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for EcKeyRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for EcdsaSig","synthetic":false,"types":[]},{"text":"impl Send for EcdsaSigRef","synthetic":false,"types":[]},{"text":"impl Send for Error","synthetic":false,"types":[]},{"text":"impl Send for MessageDigest","synthetic":false,"types":[]},{"text":"impl Send for Hasher","synthetic":false,"types":[]},{"text":"impl Send for OcspBasicResponse","synthetic":false,"types":[]},{"text":"impl Send for OcspBasicResponseRef","synthetic":false,"types":[]},{"text":"impl Send for OcspCertId","synthetic":false,"types":[]},{"text":"impl Send for OcspCertIdRef","synthetic":false,"types":[]},{"text":"impl Send for OcspResponse","synthetic":false,"types":[]},{"text":"impl Send for OcspResponseRef","synthetic":false,"types":[]},{"text":"impl Send for OcspRequest","synthetic":false,"types":[]},{"text":"impl Send for OcspRequestRef","synthetic":false,"types":[]},{"text":"impl Send for OcspOneReq","synthetic":false,"types":[]},{"text":"impl Send for OcspOneReqRef","synthetic":false,"types":[]},{"text":"impl Send for Pkcs12","synthetic":false,"types":[]},{"text":"impl Send for Pkcs12Ref","synthetic":false,"types":[]},{"text":"impl Send for Pkcs7","synthetic":false,"types":[]},{"text":"impl Send for Pkcs7Ref","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for PKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for PKeyRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for Rsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RsaRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Signer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for Verifier&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Send for SrtpProtectionProfile","synthetic":false,"types":[]},{"text":"impl Send for SrtpProtectionProfileRef","synthetic":false,"types":[]},{"text":"impl Send for SslMethod","synthetic":false,"types":[]},{"text":"impl Send for SslContext","synthetic":false,"types":[]},{"text":"impl Send for SslContextRef","synthetic":false,"types":[]},{"text":"impl Send for SslSession","synthetic":false,"types":[]},{"text":"impl Send for SslSessionRef","synthetic":false,"types":[]},{"text":"impl Send for Ssl","synthetic":false,"types":[]},{"text":"impl Send for SslRef","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Stackable + Send&gt; Send for Stack&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Stackable + Send&gt; Send for StackRef&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for OpensslString","synthetic":false,"types":[]},{"text":"impl Send for OpensslStringRef","synthetic":false,"types":[]},{"text":"impl Send for Cipher","synthetic":false,"types":[]},{"text":"impl Send for Crypter","synthetic":false,"types":[]},{"text":"impl Send for X509VerifyParam","synthetic":false,"types":[]},{"text":"impl Send for X509VerifyParamRef","synthetic":false,"types":[]},{"text":"impl Send for X509StoreBuilder","synthetic":false,"types":[]},{"text":"impl Send for X509StoreBuilderRef","synthetic":false,"types":[]},{"text":"impl Send for X509Store","synthetic":false,"types":[]},{"text":"impl Send for X509StoreRef","synthetic":false,"types":[]},{"text":"impl Send for X509StoreContext","synthetic":false,"types":[]},{"text":"impl Send for X509StoreContextRef","synthetic":false,"types":[]},{"text":"impl Send for X509","synthetic":false,"types":[]},{"text":"impl Send for X509Ref","synthetic":false,"types":[]},{"text":"impl Send for X509Extension","synthetic":false,"types":[]},{"text":"impl Send for X509ExtensionRef","synthetic":false,"types":[]},{"text":"impl Send for X509Name","synthetic":false,"types":[]},{"text":"impl Send for X509NameRef","synthetic":false,"types":[]},{"text":"impl Send for X509NameEntry","synthetic":false,"types":[]},{"text":"impl Send for X509NameEntryRef","synthetic":false,"types":[]},{"text":"impl Send for X509Req","synthetic":false,"types":[]},{"text":"impl Send for X509ReqRef","synthetic":false,"types":[]},{"text":"impl Send for GeneralName","synthetic":false,"types":[]},{"text":"impl Send for GeneralNameRef","synthetic":false,"types":[]},{"text":"impl Send for X509Algorithm","synthetic":false,"types":[]},{"text":"impl Send for X509AlgorithmRef","synthetic":false,"types":[]},{"text":"impl Send for X509Object","synthetic":false,"types":[]},{"text":"impl Send for X509ObjectRef","synthetic":false,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl Send for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Send for AES_KEY","synthetic":true,"types":[]},{"text":"impl !Send for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl !Send for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl !Send for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl Send for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl !Send for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl !Send for X509_VAL","synthetic":true,"types":[]},{"text":"impl !Send for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl Send for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl Send for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl Send for stack_st_void","synthetic":true,"types":[]},{"text":"impl Send for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl Send for EC_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EC_GROUP","synthetic":true,"types":[]},{"text":"impl Send for EC_POINT","synthetic":true,"types":[]},{"text":"impl Send for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl Send for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl Send for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl Send for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl Send for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl Send for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl Send for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl Send for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl Send for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl Send for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl Send for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl Send for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl Send for bio_st","synthetic":true,"types":[]},{"text":"impl Send for BIO","synthetic":true,"types":[]},{"text":"impl Send for BIGNUM","synthetic":true,"types":[]},{"text":"impl Send for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl Send for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl Send for BN_CTX","synthetic":true,"types":[]},{"text":"impl Send for BN_GENCB","synthetic":true,"types":[]},{"text":"impl Send for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl Send for EVP_MD","synthetic":true,"types":[]},{"text":"impl Send for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl Send for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl Send for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl Send for DH","synthetic":true,"types":[]},{"text":"impl Send for DH_METHOD","synthetic":true,"types":[]},{"text":"impl Send for DSA","synthetic":true,"types":[]},{"text":"impl Send for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl Send for RSA","synthetic":true,"types":[]},{"text":"impl Send for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl Send for EC_KEY","synthetic":true,"types":[]},{"text":"impl Send for X509","synthetic":true,"types":[]},{"text":"impl Send for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl Send for X509_CRL","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl Send for X509_NAME","synthetic":true,"types":[]},{"text":"impl Send for X509_STORE","synthetic":true,"types":[]},{"text":"impl Send for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl Send for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl Send for CONF","synthetic":true,"types":[]},{"text":"impl Send for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl Send for ENGINE","synthetic":true,"types":[]},{"text":"impl Send for SSL","synthetic":true,"types":[]},{"text":"impl Send for SSL_CTX","synthetic":true,"types":[]},{"text":"impl Send for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl Send for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl Send for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl Send for PKCS12","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl Send for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl Send for PKCS7","synthetic":true,"types":[]},{"text":"impl Send for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl Send for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl Send for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl Send for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl Send for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl Send for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl Send for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl Send for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl Send for X509_REQ","synthetic":true,"types":[]},{"text":"impl Send for X509_CINF","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509","synthetic":true,"types":[]},{"text":"impl Send for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl Send for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl Send for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl Send for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl Send for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Send for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;'i, R&gt; Send for ParserState&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for Position&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for Lines&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Send for Span&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Send for Atomicity","synthetic":true,"types":[]},{"text":"impl Send for Lookahead","synthetic":true,"types":[]},{"text":"impl Send for MatchDir","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; Send for Token&lt;'i, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Error&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ErrorVariant&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for InputLocation","synthetic":true,"types":[]},{"text":"impl Send for LineColLocation","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; !Send for FlatPairs&lt;'i, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; !Send for Pair&lt;'i, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; !Send for Pairs&lt;'i, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, R&gt; !Send for Tokens&lt;'i, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Operator&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for PrecClimber&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Assoc","synthetic":true,"types":[]}];
implementors["petgraph"] = [{"text":"impl Send for Direction","synthetic":true,"types":[]},{"text":"impl Send for Directed","synthetic":true,"types":[]},{"text":"impl Send for Undirected","synthetic":true,"types":[]},{"text":"impl&lt;G, F&gt; Send for NodeFiltered&lt;G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for NodeFilteredNeighbors&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Send for NodeFilteredNodes&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I, F&gt; Send for NodeFilteredEdgeReferences&lt;'a, G, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I, F&gt; Send for NodeFilteredEdges&lt;'a, G, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, F&gt; Send for EdgeFiltered&lt;G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, F&gt; Send for EdgeFilteredNeighbors&lt;'a, G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as IntoEdges&gt;::Edges: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, I, F&gt; Send for EdgeFilteredEdges&lt;'a, G, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, F&gt; Send for EdgeFilteredNeighborsDirected&lt;'a, G, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as IntoEdgesDirected&gt;::EdgesDirected: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as GraphBase&gt;::NodeId: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Send for Reversed&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ReversedEdges&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReversedEdgeReference&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for ReversedEdgeReferences&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Time","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; Send for Dfs&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; Send for DfsPostOrder&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; Send for Bfs&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; Send for Topo&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, C&gt; Send for WalkerIter&lt;W, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for DfsEvent&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Control&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FilterElements&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E&gt; Send for Element&lt;N, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, VM&gt; Send for DfsSpace&lt;N, VM&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;VM: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Send for MinSpanningTree&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as Data&gt;::EdgeWeight: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as GraphBase&gt;::NodeId: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as IntoNodeReferences&gt;::NodeReferences: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Cycle&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NegativeCycle","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for Dominators&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; Send for DominatorsIter&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty, Ix&gt; Send for Csr&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EdgesNotSorted","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; Send for Edges&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; Send for EdgeReference&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; Send for EdgeReferences&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Ix&gt; Send for Neighbors&lt;'a, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; Send for NodeIdentifiers&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G&gt; !Send for Dot&lt;'a, G&gt;","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; Send for NodeIndex&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; Send for EdgeIndex&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, Ix&gt; Send for Node&lt;N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E, Ix&gt; Send for Edge&lt;E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty, Ix&gt; Send for Graph&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ty, Ix&gt; Send for Externals&lt;'a, N, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; Send for Neighbors&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; Send for Edges&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; Send for EdgesConnecting&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ix&gt; Send for NodeWeightsMut&lt;'a, N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; Send for EdgeWeightsMut&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; Send for WalkNeighbors&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; Send for NodeIndices&lt;Ix&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ix&gt; Send for EdgeIndices&lt;Ix&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; Send for EdgeReference&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ix&gt; Send for NodeReferences&lt;'a, N, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; Send for EdgeReferences&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G&gt; Send for Frozen&lt;'a, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N, E, Ty&gt; Send for GraphMap&lt;N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; Send for Nodes&lt;'a, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ty&gt; Send for Neighbors&lt;'a, N, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, Ty&gt; Send for NeighborsDirected&lt;'a, N, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; Send for Edges&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; Send for AllEdges&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; Send for AllEdgesMut&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'b, T&gt; Send for Ptr&lt;'b, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; Send for NodeIdentifiers&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, N, E, Ty&gt; Send for NodeReferences&lt;'a, N, E, Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for UnionFind&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Send for YesS3","synthetic":true,"types":[]},{"text":"impl Send for NoS3","synthetic":true,"types":[]},{"text":"impl Send for YesS4","synthetic":true,"types":[]},{"text":"impl Send for NoS4","synthetic":true,"types":[]},{"text":"impl Send for YesA1","synthetic":true,"types":[]},{"text":"impl Send for NoA1","synthetic":true,"types":[]},{"text":"impl Send for YesA2","synthetic":true,"types":[]},{"text":"impl Send for NoA2","synthetic":true,"types":[]},{"text":"impl Send for YesNI","synthetic":true,"types":[]},{"text":"impl Send for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Send for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Send for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for vec128_storage","synthetic":true,"types":[]},{"text":"impl Send for vec256_storage","synthetic":true,"types":[]},{"text":"impl Send for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Send for TokenStream","synthetic":true,"types":[]},{"text":"impl !Send for LexError","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for Punct","synthetic":true,"types":[]},{"text":"impl !Send for Ident","synthetic":true,"types":[]},{"text":"impl !Send for Literal","synthetic":true,"types":[]},{"text":"impl !Send for TokenTree","synthetic":true,"types":[]},{"text":"impl Send for Delimiter","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl !Send for IntoIter","synthetic":true,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl !Send for Diagnostic","synthetic":true,"types":[]},{"text":"impl !Send for SpanRange","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]}];
implementors["proptest"] = [{"text":"impl&lt;S, T&gt; Send for UniformArrayStrategy&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ArrayValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BitSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SampledBitSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BitSetValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for Weighted","synthetic":true,"types":[]},{"text":"impl Send for BoolValueTree","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CharStrategy&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CharValueTree","synthetic":true,"types":[]},{"text":"impl Send for SizeRange","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for VecStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for VecDequeStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for VecDequeValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LinkedListStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LinkedListValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BinaryHeapStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BinaryHeapValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for HashSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for HashSetValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BTreeSetStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BTreeSetValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for HashMapStrategy&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for HashMapValueTree&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for BTreeMapStrategy&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for BTreeMapValueTree&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for VecValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl Send for Any","synthetic":true,"types":[]},{"text":"impl Send for BinarySearch","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V, F, O&gt; Send for FilterMapValueTree&lt;V, F, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for FlattenValueTree&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;S as ValueTree&gt;::Value as Strategy&gt;::Tree: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for IndFlatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for IndFlattenMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Fuse&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Just&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for LazyJust&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for LazyValueTree&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Strategy&gt;::Tree: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, O&gt; Send for MapInto&lt;S, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Perturb&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for PerturbValueTree&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; !Send for Recursive&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Shuffle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for ShuffleValueTree&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for NoShrink&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for BoxedStrategy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SBoxedStrategy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for CheckStrategySanityOptions","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Union&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnionValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Tree: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TupleUnion&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TupleUnionValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Filter&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for MapFailurePersistence","synthetic":true,"types":[]},{"text":"impl Send for PersistedSeed","synthetic":true,"types":[]},{"text":"impl Send for Reason","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ResultCacheKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TestRng","synthetic":true,"types":[]},{"text":"impl Send for TestRunner","synthetic":true,"types":[]},{"text":"impl Send for TestCaseError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TestError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FileFailurePersistence","synthetic":true,"types":[]},{"text":"impl Send for RngAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TupleValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Probability","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OptionStrategy&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Value: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OptionValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Tree: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Value: Debug + Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for MaybeOk&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Strategy&gt;::Value: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Value: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for MaybeOkValueTree&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Strategy&gt;::Tree: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Tree: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Strategy&gt;::Value: Debug + Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Value: Debug + Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for MaybeErr&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Strategy&gt;::Value: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Value: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for MaybeErrValueTree&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Strategy&gt;::Tree: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Tree: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Strategy&gt;::Value: Debug + Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Strategy&gt;::Value: Debug + Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Subsequence&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SubsequenceValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Select&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SelectValueTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Index","synthetic":true,"types":[]},{"text":"impl Send for IndexStrategy","synthetic":true,"types":[]},{"text":"impl Send for IndexValueTree","synthetic":true,"types":[]},{"text":"impl Send for Selector","synthetic":true,"types":[]},{"text":"impl Send for SelectorStrategy","synthetic":true,"types":[]},{"text":"impl Send for SelectorValueTree","synthetic":true,"types":[]},{"text":"impl Send for StringParam","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RegexGeneratorStrategy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for RegexGeneratorValueTree&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["proptest_ext"] = [{"text":"impl Send for ValueGenerator","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Send for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Send for Bernoulli","synthetic":true,"types":[]},{"text":"impl Send for Open01","synthetic":true,"types":[]},{"text":"impl Send for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Send for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Binomial","synthetic":true,"types":[]},{"text":"impl Send for Cauchy","synthetic":true,"types":[]},{"text":"impl Send for Dirichlet","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for Exp1","synthetic":true,"types":[]},{"text":"impl Send for Beta","synthetic":true,"types":[]},{"text":"impl Send for ChiSquared","synthetic":true,"types":[]},{"text":"impl Send for FisherF","synthetic":true,"types":[]},{"text":"impl Send for Gamma","synthetic":true,"types":[]},{"text":"impl Send for StudentT","synthetic":true,"types":[]},{"text":"impl Send for LogNormal","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for StandardNormal","synthetic":true,"types":[]},{"text":"impl Send for Pareto","synthetic":true,"types":[]},{"text":"impl Send for Poisson","synthetic":true,"types":[]},{"text":"impl Send for Triangular","synthetic":true,"types":[]},{"text":"impl Send for UnitCircle","synthetic":true,"types":[]},{"text":"impl Send for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Send for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Send for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Standard","synthetic":true,"types":[]},{"text":"impl Send for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EntropyRng","synthetic":true,"types":[]},{"text":"impl Send for StdRng","synthetic":true,"types":[]},{"text":"impl !Send for ThreadRng","synthetic":true,"types":[]},{"text":"impl Send for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Send for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Send for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Send for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl Send for XorShiftRng","synthetic":true,"types":[]}];
implementors["rand_xoshiro"] = [{"text":"impl Send for SplitMix64","synthetic":true,"types":[]},{"text":"impl Send for Xoshiro128StarStar","synthetic":true,"types":[]},{"text":"impl Send for Xoshiro128PlusPlus","synthetic":true,"types":[]},{"text":"impl Send for Xoshiro128Plus","synthetic":true,"types":[]},{"text":"impl Send for Xoshiro256StarStar","synthetic":true,"types":[]},{"text":"impl Send for Xoshiro256PlusPlus","synthetic":true,"types":[]},{"text":"impl Send for Xoshiro256Plus","synthetic":true,"types":[]},{"text":"impl Send for Seed512","synthetic":true,"types":[]},{"text":"impl Send for Xoshiro512StarStar","synthetic":true,"types":[]},{"text":"impl Send for Xoshiro512PlusPlus","synthetic":true,"types":[]},{"text":"impl Send for Xoshiro512Plus","synthetic":true,"types":[]},{"text":"impl Send for Xoroshiro128Plus","synthetic":true,"types":[]},{"text":"impl Send for Xoroshiro128StarStar","synthetic":true,"types":[]},{"text":"impl Send for Xoroshiro128PlusPlus","synthetic":true,"types":[]},{"text":"impl Send for Xoroshiro64StarStar","synthetic":true,"types":[]},{"text":"impl Send for Xoroshiro64Star","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Chain&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Chunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Cloned&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Copied&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Enumerate&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Flatten&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for FlattenIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Send for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for Interleave&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Send for InterleaveShortest&lt;I, J&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MaxLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for MinLen&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Send for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Send for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for PanicFuse&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Send for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RepeatN&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Rev&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Send for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Send for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Send for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Send for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for WhileSome&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Zip&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for ZipEq&lt;A, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StepBy&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Send for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Send for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Send for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Send for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Send for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for ThreadPool","synthetic":true,"types":[]},{"text":"impl Send for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Send for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Send for Configuration","synthetic":true,"types":[]},{"text":"impl !Send for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;D&gt; Send for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for WithComments","synthetic":true,"types":[]},{"text":"impl Send for Comment","synthetic":true,"types":[]},{"text":"impl Send for Alternation","synthetic":true,"types":[]},{"text":"impl Send for Concat","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for ClassPerl","synthetic":true,"types":[]},{"text":"impl Send for ClassAscii","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Send for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Send for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Send for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Send for Assertion","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for CaptureName","synthetic":true,"types":[]},{"text":"impl Send for SetFlags","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for FlagsItem","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Ast","synthetic":true,"types":[]},{"text":"impl Send for LiteralKind","synthetic":true,"types":[]},{"text":"impl Send for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Send for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Send for ClassSet","synthetic":true,"types":[]},{"text":"impl Send for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Send for AssertionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Hir","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Send for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for HirKind","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for WordBoundary","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for Literals","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Translator","synthetic":true,"types":[]},{"text":"impl Send for Utf8Range","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequence","synthetic":true,"types":[]}];
implementors["rustfix"] = [{"text":"impl Send for LinePosition","synthetic":true,"types":[]},{"text":"impl Send for LineRange","synthetic":true,"types":[]},{"text":"impl Send for Suggestion","synthetic":true,"types":[]},{"text":"impl Send for Solution","synthetic":true,"types":[]},{"text":"impl Send for Snippet","synthetic":true,"types":[]},{"text":"impl Send for Replacement","synthetic":true,"types":[]},{"text":"impl !Send for CodeFix","synthetic":true,"types":[]},{"text":"impl Send for Filter","synthetic":true,"types":[]},{"text":"impl Send for Diagnostic","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticSpan","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticSpanLine","synthetic":true,"types":[]},{"text":"impl Send for DiagnosticCode","synthetic":true,"types":[]},{"text":"impl Send for Applicability","synthetic":true,"types":[]}];
implementors["rusty_fork"] = [{"text":"impl Send for RustyForkId","synthetic":true,"types":[]},{"text":"impl Send for ChildWrapper","synthetic":true,"types":[]},{"text":"impl Send for ExitStatusWrapper","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Send for Handle","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Send for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Always","synthetic":true,"types":[]}];
implementors["semver"] = [{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for VersionReq","synthetic":true,"types":[]},{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for SemVerError","synthetic":true,"types":[]},{"text":"impl Send for ReqParseError","synthetic":true,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Send for RangeSet","synthetic":true,"types":[]},{"text":"impl Send for Comparator","synthetic":true,"types":[]},{"text":"impl Send for Range","synthetic":true,"types":[]},{"text":"impl Send for Compat","synthetic":true,"types":[]},{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for Op","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Send for Lexer&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Send for Token&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Send for Parser&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input&gt; Send for Error&lt;'input&gt;","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Identifier","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Send for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Send for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Send for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_ignored"] = [{"text":"impl&lt;'a, 'b, D, F&gt; Send for Deserializer&lt;'a, 'b, D, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Path&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Send for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Send for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Send for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Number","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CharEscape","synthetic":true,"types":[]},{"text":"impl Send for Serializer","synthetic":true,"types":[]},{"text":"impl Send for RawValue","synthetic":true,"types":[]}];
implementors["sized_chunks"] = [{"text":"impl&lt;'a, A, T&gt; Send for Drain&lt;'a, A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Send for Iter&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, T&gt; Send for InlineArray&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; Send for Drain&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; Send for Iter&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; Send for Chunk&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; Send for Drain&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; Send for Iter&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; Send for IterMut&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; Send for OptionDrain&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; Send for OptionIter&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, N&gt; Send for OptionIterMut&lt;'a, A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, N&gt; Send for SparseChunk&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as ChunkLength&lt;A&gt;&gt;::SizedType: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;N as Bits&gt;::Store: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send + Array&gt; Send for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Send for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["socket2"] = [{"text":"impl Send for SockAddr","synthetic":true,"types":[]},{"text":"impl Send for Socket","synthetic":true,"types":[]},{"text":"impl Send for Domain","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]}];
implementors["strip_ansi_escapes"] = [{"text":"impl&lt;W&gt; Send for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl Send for StrSimError","synthetic":true,"types":[]}];
implementors["supercow"] = [{"text":"impl&lt;'a, P&gt; !Send for Ref&lt;'a, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !Send for TwoStepRc&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B:&nbsp;?Sized&gt; Send for TwoStepArc&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for InlineStorage&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for BoxedStorage","synthetic":true,"types":[]},{"text":"impl&lt;'a, OWNED, BORROWED:&nbsp;?Sized, SHARED, STORAGE, PTR&gt; Send for Supercow&lt;'a, OWNED, BORROWED, SHARED, STORAGE, PTR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BORROWED: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;*const BORROWED: PointerFirstRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;STORAGE: OwnedStorage&lt;OWNED, SHARED&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;PTR: PtrWrite&lt;BORROWED&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;OWNED: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a BORROWED: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;SHARED: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;STORAGE: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for MetaList","synthetic":true,"types":[]},{"text":"impl !Send for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Send for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for VisCrate","synthetic":true,"types":[]},{"text":"impl !Send for VisPublic","synthetic":true,"types":[]},{"text":"impl !Send for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Send for ExprArray","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Send for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Send for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Send for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprBox","synthetic":true,"types":[]},{"text":"impl !Send for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Send for ExprCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprCast","synthetic":true,"types":[]},{"text":"impl !Send for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Send for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Send for ExprField","synthetic":true,"types":[]},{"text":"impl !Send for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Send for ExprIf","synthetic":true,"types":[]},{"text":"impl !Send for ExprInPlace","synthetic":true,"types":[]},{"text":"impl !Send for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Send for ExprLet","synthetic":true,"types":[]},{"text":"impl !Send for ExprLit","synthetic":true,"types":[]},{"text":"impl !Send for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Send for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Send for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprParen","synthetic":true,"types":[]},{"text":"impl !Send for ExprPath","synthetic":true,"types":[]},{"text":"impl !Send for ExprRange","synthetic":true,"types":[]},{"text":"impl !Send for ExprReference","synthetic":true,"types":[]},{"text":"impl !Send for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Send for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Send for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Send for ExprTry","synthetic":true,"types":[]},{"text":"impl !Send for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Send for ExprType","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Send for ExprVerbatim","synthetic":true,"types":[]},{"text":"impl !Send for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Send for ExprYield","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl !Send for Arm","synthetic":true,"types":[]},{"text":"impl !Send for Block","synthetic":true,"types":[]},{"text":"impl !Send for FieldPat","synthetic":true,"types":[]},{"text":"impl !Send for FieldValue","synthetic":true,"types":[]},{"text":"impl !Send for Label","synthetic":true,"types":[]},{"text":"impl !Send for Local","synthetic":true,"types":[]},{"text":"impl !Send for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Send for PatBox","synthetic":true,"types":[]},{"text":"impl !Send for PatIdent","synthetic":true,"types":[]},{"text":"impl !Send for PatLit","synthetic":true,"types":[]},{"text":"impl !Send for PatMacro","synthetic":true,"types":[]},{"text":"impl !Send for PatPath","synthetic":true,"types":[]},{"text":"impl !Send for PatRange","synthetic":true,"types":[]},{"text":"impl !Send for PatRef","synthetic":true,"types":[]},{"text":"impl !Send for PatSlice","synthetic":true,"types":[]},{"text":"impl !Send for PatStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatTuple","synthetic":true,"types":[]},{"text":"impl !Send for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatVerbatim","synthetic":true,"types":[]},{"text":"impl !Send for PatWild","synthetic":true,"types":[]},{"text":"impl !Send for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Send for ConstParam","synthetic":true,"types":[]},{"text":"impl !Send for Generics","synthetic":true,"types":[]},{"text":"impl !Send for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Send for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Send for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Send for PredicateType","synthetic":true,"types":[]},{"text":"impl !Send for TraitBound","synthetic":true,"types":[]},{"text":"impl !Send for TypeParam","synthetic":true,"types":[]},{"text":"impl !Send for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for ArgCaptured","synthetic":true,"types":[]},{"text":"impl !Send for ArgSelf","synthetic":true,"types":[]},{"text":"impl !Send for ArgSelfRef","synthetic":true,"types":[]},{"text":"impl !Send for FnDecl","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemVerbatim","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemExistential","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemVerbatim","synthetic":true,"types":[]},{"text":"impl !Send for ItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Send for ItemExistential","synthetic":true,"types":[]},{"text":"impl !Send for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Send for ItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Send for ItemMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Send for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Send for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Send for ItemType","synthetic":true,"types":[]},{"text":"impl !Send for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Send for ItemUse","synthetic":true,"types":[]},{"text":"impl !Send for ItemVerbatim","synthetic":true,"types":[]},{"text":"impl !Send for MethodSig","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemVerbatim","synthetic":true,"types":[]},{"text":"impl !Send for UseGlob","synthetic":true,"types":[]},{"text":"impl !Send for UseGroup","synthetic":true,"types":[]},{"text":"impl !Send for UseName","synthetic":true,"types":[]},{"text":"impl !Send for UsePath","synthetic":true,"types":[]},{"text":"impl !Send for UseRename","synthetic":true,"types":[]},{"text":"impl !Send for File","synthetic":true,"types":[]},{"text":"impl !Send for Lifetime","synthetic":true,"types":[]},{"text":"impl !Send for LitBool","synthetic":true,"types":[]},{"text":"impl !Send for LitByte","synthetic":true,"types":[]},{"text":"impl !Send for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Send for LitChar","synthetic":true,"types":[]},{"text":"impl !Send for LitFloat","synthetic":true,"types":[]},{"text":"impl !Send for LitInt","synthetic":true,"types":[]},{"text":"impl !Send for LitStr","synthetic":true,"types":[]},{"text":"impl !Send for LitVerbatim","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for DataEnum","synthetic":true,"types":[]},{"text":"impl !Send for DataStruct","synthetic":true,"types":[]},{"text":"impl !Send for DataUnion","synthetic":true,"types":[]},{"text":"impl !Send for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Send for Abi","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Send for TypeArray","synthetic":true,"types":[]},{"text":"impl !Send for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Send for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Send for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Send for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Send for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Send for TypeNever","synthetic":true,"types":[]},{"text":"impl !Send for TypeParen","synthetic":true,"types":[]},{"text":"impl !Send for TypePath","synthetic":true,"types":[]},{"text":"impl !Send for TypePtr","synthetic":true,"types":[]},{"text":"impl !Send for TypeReference","synthetic":true,"types":[]},{"text":"impl !Send for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Send for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Send for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Send for TypeVerbatim","synthetic":true,"types":[]},{"text":"impl !Send for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Binding","synthetic":true,"types":[]},{"text":"impl !Send for Constraint","synthetic":true,"types":[]},{"text":"impl !Send for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl !Send for PathSegment","synthetic":true,"types":[]},{"text":"impl !Send for QSelf","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl !Send for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Send for Fields","synthetic":true,"types":[]},{"text":"impl !Send for Visibility","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl !Send for Member","synthetic":true,"types":[]},{"text":"impl !Send for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Send for Pat","synthetic":true,"types":[]},{"text":"impl !Send for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Send for Stmt","synthetic":true,"types":[]},{"text":"impl !Send for GenericParam","synthetic":true,"types":[]},{"text":"impl !Send for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Send for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Send for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Send for FnArg","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Send for ImplItem","synthetic":true,"types":[]},{"text":"impl !Send for Item","synthetic":true,"types":[]},{"text":"impl !Send for TraitItem","synthetic":true,"types":[]},{"text":"impl !Send for UseTree","synthetic":true,"types":[]},{"text":"impl Send for FloatSuffix","synthetic":true,"types":[]},{"text":"impl Send for IntSuffix","synthetic":true,"types":[]},{"text":"impl !Send for Lit","synthetic":true,"types":[]},{"text":"impl Send for StrStyle","synthetic":true,"types":[]},{"text":"impl !Send for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Send for Data","synthetic":true,"types":[]},{"text":"impl !Send for BinOp","synthetic":true,"types":[]},{"text":"impl !Send for UnOp","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArgName","synthetic":true,"types":[]},{"text":"impl !Send for ReturnType","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Send for PathArguments","synthetic":true,"types":[]},{"text":"impl !Send for Underscore","synthetic":true,"types":[]},{"text":"impl !Send for Abstract","synthetic":true,"types":[]},{"text":"impl !Send for As","synthetic":true,"types":[]},{"text":"impl !Send for Async","synthetic":true,"types":[]},{"text":"impl !Send for Auto","synthetic":true,"types":[]},{"text":"impl !Send for Become","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for Break","synthetic":true,"types":[]},{"text":"impl !Send for Const","synthetic":true,"types":[]},{"text":"impl !Send for Continue","synthetic":true,"types":[]},{"text":"impl !Send for Crate","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl !Send for Do","synthetic":true,"types":[]},{"text":"impl !Send for Dyn","synthetic":true,"types":[]},{"text":"impl !Send for Else","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Existential","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl !Send for Final","synthetic":true,"types":[]},{"text":"impl !Send for Fn","synthetic":true,"types":[]},{"text":"impl !Send for For","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for Impl","synthetic":true,"types":[]},{"text":"impl !Send for In","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for Loop","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for Move","synthetic":true,"types":[]},{"text":"impl !Send for Mut","synthetic":true,"types":[]},{"text":"impl !Send for Override","synthetic":true,"types":[]},{"text":"impl !Send for Priv","synthetic":true,"types":[]},{"text":"impl !Send for Pub","synthetic":true,"types":[]},{"text":"impl !Send for Ref","synthetic":true,"types":[]},{"text":"impl !Send for Return","synthetic":true,"types":[]},{"text":"impl !Send for SelfType","synthetic":true,"types":[]},{"text":"impl !Send for SelfValue","synthetic":true,"types":[]},{"text":"impl !Send for Static","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for Super","synthetic":true,"types":[]},{"text":"impl !Send for Trait","synthetic":true,"types":[]},{"text":"impl !Send for Try","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Typeof","synthetic":true,"types":[]},{"text":"impl !Send for Union","synthetic":true,"types":[]},{"text":"impl !Send for Unsafe","synthetic":true,"types":[]},{"text":"impl !Send for Unsized","synthetic":true,"types":[]},{"text":"impl !Send for Use","synthetic":true,"types":[]},{"text":"impl !Send for Virtual","synthetic":true,"types":[]},{"text":"impl !Send for Where","synthetic":true,"types":[]},{"text":"impl !Send for While","synthetic":true,"types":[]},{"text":"impl !Send for Yield","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for AddEq","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for AndAnd","synthetic":true,"types":[]},{"text":"impl !Send for AndEq","synthetic":true,"types":[]},{"text":"impl !Send for At","synthetic":true,"types":[]},{"text":"impl !Send for Bang","synthetic":true,"types":[]},{"text":"impl !Send for Caret","synthetic":true,"types":[]},{"text":"impl !Send for CaretEq","synthetic":true,"types":[]},{"text":"impl !Send for Colon","synthetic":true,"types":[]},{"text":"impl !Send for Colon2","synthetic":true,"types":[]},{"text":"impl !Send for Comma","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for DivEq","synthetic":true,"types":[]},{"text":"impl !Send for Dollar","synthetic":true,"types":[]},{"text":"impl !Send for Dot","synthetic":true,"types":[]},{"text":"impl !Send for Dot2","synthetic":true,"types":[]},{"text":"impl !Send for Dot3","synthetic":true,"types":[]},{"text":"impl !Send for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for EqEq","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for MulEq","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for OrEq","synthetic":true,"types":[]},{"text":"impl !Send for OrOr","synthetic":true,"types":[]},{"text":"impl !Send for Pound","synthetic":true,"types":[]},{"text":"impl !Send for Question","synthetic":true,"types":[]},{"text":"impl !Send for RArrow","synthetic":true,"types":[]},{"text":"impl !Send for LArrow","synthetic":true,"types":[]},{"text":"impl !Send for Rem","synthetic":true,"types":[]},{"text":"impl !Send for RemEq","synthetic":true,"types":[]},{"text":"impl !Send for FatArrow","synthetic":true,"types":[]},{"text":"impl !Send for Semi","synthetic":true,"types":[]},{"text":"impl !Send for Shl","synthetic":true,"types":[]},{"text":"impl !Send for ShlEq","synthetic":true,"types":[]},{"text":"impl !Send for Shr","synthetic":true,"types":[]},{"text":"impl !Send for ShrEq","synthetic":true,"types":[]},{"text":"impl !Send for Star","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for SubEq","synthetic":true,"types":[]},{"text":"impl !Send for Tilde","synthetic":true,"types":[]},{"text":"impl !Send for Brace","synthetic":true,"types":[]},{"text":"impl !Send for Bracket","synthetic":true,"types":[]},{"text":"impl !Send for Paren","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoIter&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Send for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]}];
implementors["tar"] = [{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for Archive&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !Send for Entries&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Builder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !Send for Entry&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for GnuExtSparseHeader","synthetic":true,"types":[]},{"text":"impl Send for GnuHeader","synthetic":true,"types":[]},{"text":"impl Send for GnuSparseHeader","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for OldHeader","synthetic":true,"types":[]},{"text":"impl Send for UstarHeader","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; Send for PaxExtension&lt;'entry&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; Send for PaxExtensions&lt;'entry&gt;","synthetic":true,"types":[]},{"text":"impl Send for Unpacked","synthetic":true,"types":[]},{"text":"impl Send for EntryType","synthetic":true,"types":[]},{"text":"impl Send for HeaderMode","synthetic":true,"types":[]}];
implementors["target_spec"] = [{"text":"impl&lt;'a&gt; Send for TargetSpec&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Platform&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TargetFeatures&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for PlatformSummary","synthetic":true,"types":[]},{"text":"impl Send for TargetFeaturesSummary","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl Send for TempDir","synthetic":true,"types":[]},{"text":"impl Send for NamedTempFile","synthetic":true,"types":[]},{"text":"impl Send for PathPersistError","synthetic":true,"types":[]},{"text":"impl Send for PersistError","synthetic":true,"types":[]},{"text":"impl Send for TempPath","synthetic":true,"types":[]},{"text":"impl Send for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl Send for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl Send for BufferWriter","synthetic":true,"types":[]},{"text":"impl Send for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ColorSpec","synthetic":true,"types":[]},{"text":"impl Send for ParseColorError","synthetic":true,"types":[]},{"text":"impl Send for ColorChoice","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]}];
implementors["terminal_size"] = [{"text":"impl Send for Width","synthetic":true,"types":[]},{"text":"impl Send for Height","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl Send for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl Send for NoHyphenation","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; Send for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Send for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Send for Timespec","synthetic":true,"types":[]},{"text":"impl Send for PreciseTime","synthetic":true,"types":[]},{"text":"impl Send for SteadyTime","synthetic":true,"types":[]},{"text":"impl Send for Tm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TmFmt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Send for ArrayVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Send for TinyVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["toml_edit"] = [{"text":"impl Send for ArrayOfTables","synthetic":true,"types":[]},{"text":"impl Send for Decor","synthetic":true,"types":[]},{"text":"impl Send for Document","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for TomlError","synthetic":true,"types":[]},{"text":"impl Send for Table","synthetic":true,"types":[]},{"text":"impl Send for Array","synthetic":true,"types":[]},{"text":"impl Send for InlineTable","synthetic":true,"types":[]},{"text":"impl Send for Item","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Send for Greater","synthetic":true,"types":[]},{"text":"impl Send for Less","synthetic":true,"types":[]},{"text":"impl Send for Equal","synthetic":true,"types":[]},{"text":"impl Send for B0","synthetic":true,"types":[]},{"text":"impl Send for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Z0","synthetic":true,"types":[]},{"text":"impl Send for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Send for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Send for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl Send for TrieSetOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TrieSetSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Send for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl Send for BidiClass","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Send for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IsNormalized","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Send for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for GraphemeIncomplete","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl Send for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Origin","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["utf8parse"] = [{"text":"impl Send for Parser","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; Send for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["void"] = [{"text":"impl Send for Void","synthetic":true,"types":[]}];
implementors["vte"] = [{"text":"impl Send for Parser","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for WalkDir","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Send for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Send,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()