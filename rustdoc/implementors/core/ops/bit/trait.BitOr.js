(function() {var implementors = {};
implementors["bitmaps"] = [{"text":"impl&lt;Size:&nbsp;Bits&gt; BitOr&lt;Bitmap&lt;Size&gt;&gt; for Bitmap&lt;Size&gt;","synthetic":false,"types":[]}];
implementors["fixedbitset"] = [{"text":"impl&lt;'a&gt; BitOr&lt;&amp;'a FixedBitSet&gt; for &amp;'a FixedBitSet","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl BitOr&lt;Sort&gt; for Sort","synthetic":false,"types":[]},{"text":"impl BitOr&lt;CredentialType&gt; for CredentialType","synthetic":false,"types":[]},{"text":"impl BitOr&lt;IndexEntryFlag&gt; for IndexEntryFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;IndexEntryExtendedFlag&gt; for IndexEntryExtendedFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;IndexAddOption&gt; for IndexAddOption","synthetic":false,"types":[]},{"text":"impl BitOr&lt;RepositoryOpenFlags&gt; for RepositoryOpenFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;RevparseMode&gt; for RevparseMode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;MergeAnalysis&gt; for MergeAnalysis","synthetic":false,"types":[]},{"text":"impl BitOr&lt;MergePreference&gt; for MergePreference","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Status&gt; for Status","synthetic":false,"types":[]},{"text":"impl BitOr&lt;RepositoryInitMode&gt; for RepositoryInitMode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SubmoduleStatus&gt; for SubmoduleStatus","synthetic":false,"types":[]},{"text":"impl BitOr&lt;PathspecFlags&gt; for PathspecFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;CheckoutNotificationType&gt; for CheckoutNotificationType","synthetic":false,"types":[]},{"text":"impl BitOr&lt;DiffStatsFormat&gt; for DiffStatsFormat","synthetic":false,"types":[]},{"text":"impl BitOr&lt;StashApplyFlags&gt; for StashApplyFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;StashFlags&gt; for StashFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;AttrCheckFlags&gt; for AttrCheckFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;DiffFlags&gt; for DiffFlags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;ReferenceFormat&gt; for ReferenceFormat","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T, S, '_, '_&gt; BitOr&lt;&amp;'_ HashSet&lt;T, S&gt;&gt; for &amp;'_ HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;T, S1, S2, '_, '_&gt; BitOr&lt;&amp;'_ IndexSet&lt;T, S2&gt;&gt; for &amp;'_ IndexSet&lt;T, S1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: BuildHasher + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl BitOr&lt;CMSOptions&gt; for CMSOptions","synthetic":false,"types":[]},{"text":"impl BitOr&lt;OcspFlag&gt; for OcspFlag","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Pkcs7Flags&gt; for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SslOptions&gt; for SslOptions","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SslMode&gt; for SslMode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SslVerifyMode&gt; for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;SslSessionCacheMode&gt; for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl BitOr&lt;ExtensionContext&gt; for ExtensionContext","synthetic":false,"types":[]},{"text":"impl BitOr&lt;ShutdownState&gt; for ShutdownState","synthetic":false,"types":[]},{"text":"impl BitOr&lt;X509CheckFlags&gt; for X509CheckFlags","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;R:&nbsp;RuleType&gt; BitOr&lt;Operator&lt;R&gt;&gt; for Operator&lt;R&gt;","synthetic":false,"types":[]}];
implementors["proptest"] = [{"text":"impl BitOr&lt;Any&gt; for Any","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Any&gt; for Any","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl BitOr&lt;B0&gt; for B0","synthetic":false,"types":[]},{"text":"impl BitOr&lt;B1&gt; for B0","synthetic":false,"types":[]},{"text":"impl&lt;Rhs:&nbsp;Bit&gt; BitOr&lt;Rhs&gt; for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned&gt; BitOr&lt;U&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Bit, U:&nbsp;Unsigned&gt; BitOr&lt;UTerm&gt; for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Ur:&nbsp;Unsigned&gt; BitOr&lt;UInt&lt;Ur, B0&gt;&gt; for UInt&lt;Ul, B0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: BitOr&lt;Ur&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Ur:&nbsp;Unsigned&gt; BitOr&lt;UInt&lt;Ur, B1&gt;&gt; for UInt&lt;Ul, B0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: BitOr&lt;Ur&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Ur:&nbsp;Unsigned&gt; BitOr&lt;UInt&lt;Ur, B0&gt;&gt; for UInt&lt;Ul, B1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: BitOr&lt;Ur&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, Ur:&nbsp;Unsigned&gt; BitOr&lt;UInt&lt;Ur, B1&gt;&gt; for UInt&lt;Ul, B1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: BitOr&lt;Ur&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()