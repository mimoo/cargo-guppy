(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl Copy for MatchKind","synthetic":false,"types":[]},{"text":"impl Copy for MatchKind","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Copy for Prefix","synthetic":false,"types":[]},{"text":"impl Copy for Infix","synthetic":false,"types":[]},{"text":"impl Copy for Suffix","synthetic":false,"types":[]},{"text":"impl Copy for Style","synthetic":false,"types":[]},{"text":"impl Copy for Colour","synthetic":false,"types":[]}];
implementors["ascii"] = [{"text":"impl Copy for AsciiChar","synthetic":false,"types":[]},{"text":"impl Copy for ToAsciiCharError","synthetic":false,"types":[]},{"text":"impl Copy for AsAsciiStrError","synthetic":false,"types":[]},{"text":"impl&lt;O:&nbsp;Copy&gt; Copy for FromAsciiError&lt;O&gt;","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Copy for Stream","synthetic":false,"types":[]}];
implementors["bitmaps"] = [{"text":"impl&lt;Size:&nbsp;Bits&gt; Copy for Bitmap&lt;Size&gt;","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]}];
implementors["bytesize"] = [{"text":"impl Copy for ByteSize","synthetic":false,"types":[]}];
implementors["cargo"] = [{"text":"impl Copy for MessageFormat","synthetic":false,"types":[]},{"text":"impl Copy for CompileMode","synthetic":false,"types":[]},{"text":"impl Copy for CompileKind","synthetic":false,"types":[]},{"text":"impl Copy for CompileTarget","synthetic":false,"types":[]},{"text":"impl Copy for Metadata","synthetic":false,"types":[]},{"text":"impl Copy for Freshness","synthetic":false,"types":[]},{"text":"impl Copy for DefaultExecutor","synthetic":false,"types":[]},{"text":"impl Copy for DepKind","synthetic":false,"types":[]},{"text":"impl Copy for Edition","synthetic":false,"types":[]},{"text":"impl Copy for InternedString","synthetic":false,"types":[]},{"text":"impl Copy for PackageId","synthetic":false,"types":[]},{"text":"impl Copy for ProfileRoot","synthetic":false,"types":[]},{"text":"impl Copy for Profile","synthetic":false,"types":[]},{"text":"impl Copy for Lto","synthetic":false,"types":[]},{"text":"impl Copy for PanicStrategy","synthetic":false,"types":[]},{"text":"impl Copy for Strip","synthetic":false,"types":[]},{"text":"impl Copy for UnitFor","synthetic":false,"types":[]},{"text":"impl Copy for HasDevUnits","synthetic":false,"types":[]},{"text":"impl Copy for ForceAllTargets","synthetic":false,"types":[]},{"text":"impl Copy for FeaturesFor","synthetic":false,"types":[]},{"text":"impl Copy for ResolveVersion","synthetic":false,"types":[]},{"text":"impl Copy for ResolveBehavior","synthetic":false,"types":[]},{"text":"impl Copy for Verbosity","synthetic":false,"types":[]},{"text":"impl Copy for ColorChoice","synthetic":false,"types":[]},{"text":"impl Copy for SourceId","synthetic":false,"types":[]},{"text":"impl Copy for VersionControl","synthetic":false,"types":[]},{"text":"impl Copy for EdgeKind","synthetic":false,"types":[]},{"text":"impl Copy for Prefix","synthetic":false,"types":[]}];
implementors["cargo_guppy"] = [{"text":"impl Copy for Kind","synthetic":false,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl Copy for DependencyKind","synthetic":false,"types":[]},{"text":"impl Copy for DiagnosticLevel","synthetic":false,"types":[]}];
implementors["cfg_expr"] = [{"text":"impl Copy for Func","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for TargetPredicate&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Arch&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Vendor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Os&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Env&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Endian","synthetic":false,"types":[]},{"text":"impl Copy for Family","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for LocalResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FixedOffset","synthetic":false,"types":[]},{"text":"impl Copy for Local","synthetic":false,"types":[]},{"text":"impl Copy for Utc","synthetic":false,"types":[]},{"text":"impl Copy for NaiveDate","synthetic":false,"types":[]},{"text":"impl Copy for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Copy for IsoWeek","synthetic":false,"types":[]},{"text":"impl Copy for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Copy for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for SecondsFormat","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Copy for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Pad","synthetic":false,"types":[]},{"text":"impl Copy for ParseError","synthetic":false,"types":[]},{"text":"impl Copy for RoundingError","synthetic":false,"types":[]},{"text":"impl Copy for Weekday","synthetic":false,"types":[]},{"text":"impl Copy for Month","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Copy for AppSettings","synthetic":false,"types":[]},{"text":"impl Copy for ArgSettings","synthetic":false,"types":[]},{"text":"impl Copy for Shell","synthetic":false,"types":[]},{"text":"impl Copy for ErrorKind","synthetic":false,"types":[]}];
implementors["combine"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Consumed&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UnexpectedParse","synthetic":false,"types":[]},{"text":"impl Copy for StringStreamError","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy&gt; Copy for Tracked&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy, E:&nbsp;Copy&gt; Copy for FastResult&lt;T, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for Stream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SourcePosition","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for PartialStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy + 'a&gt; Copy for SliceStream&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy&gt; Copy for IteratorStream&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl Copy for PointerOffset","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy&gt; Copy for Bytes&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;I::Item, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Copy, I:&nbsp;Copy&gt; Copy for BytesCmp&lt;C, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;I::Item, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy&gt; Copy for Digit&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as StreamOnce&gt;::Error: ParseError&lt;&lt;I as StreamOnce&gt;::Item, &lt;I as StreamOnce&gt;::Range, &lt;I as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy&gt; Copy for Str&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;I::Item, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Copy, I:&nbsp;Copy&gt; Copy for StrCmp&lt;C, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream&lt;Item = char&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Error: ParseError&lt;I::Item, I::Range, I::Position&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Choice&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Copy, P2:&nbsp;Copy&gt; Copy for Or&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Optional&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for NotFollowedBy&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Try&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for LookAhead&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for Map&lt;P, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for FlatMap&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for AndThen&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for Recognize&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Ignore&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for Lazy&lt;P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, R:&nbsp;Copy&gt; Copy for Factory&lt;P, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, I:&nbsp;Copy, O:&nbsp;Copy, S:&nbsp;Copy&gt; Copy for Opaque&lt;F, I, O, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for FnParser&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy, I:&nbsp;Copy, T:&nbsp;Copy&gt; Copy for EnvParser&lt;E, I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy&gt; Copy for Any&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for Satisfy&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for SatisfyMap&lt;I, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy&gt; Copy for Token&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: PartialEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy&gt; Copy for Position&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy, I:&nbsp;Copy&gt; Copy for OneOf&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy, I:&nbsp;Copy&gt; Copy for NoneOf&lt;T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Stream,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy, T:&nbsp;Copy&gt; Copy for Value&lt;I, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy&gt; Copy for Eof&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for Count&lt;F, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P::Input as StreamOnce&gt;::Error: ParseError&lt;&lt;P::Input as StreamOnce&gt;::Item, &lt;P::Input as StreamOnce&gt;::Range, &lt;P::Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Extend&lt;P::Output&gt; + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for SkipCount&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P::Input as StreamOnce&gt;::Error: ParseError&lt;&lt;P::Input as StreamOnce&gt;::Item, &lt;P::Input as StreamOnce&gt;::Range, &lt;P::Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for CountMinMax&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for SkipCountMinMax&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P::Input as StreamOnce&gt;::Error: ParseError&lt;&lt;P::Input as StreamOnce&gt;::Item, &lt;P::Input as StreamOnce&gt;::Range, &lt;P::Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for Many&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for Many1&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy, S:&nbsp;Copy&gt; Copy for SepBy&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy, S:&nbsp;Copy&gt; Copy for SepBy1&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy, S:&nbsp;Copy&gt; Copy for SepEndBy&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy, S:&nbsp;Copy&gt; Copy for SepEndBy1&lt;F, P, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, Op:&nbsp;Copy&gt; Copy for Chainl1&lt;P, Op&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, Op:&nbsp;Copy&gt; Copy for Chainr1&lt;P, Op&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy, P:&nbsp;Copy&gt; Copy for TakeUntil&lt;F, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy&gt; Copy for SkipUntil&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P::Input as StreamOnce&gt;::Error: ParseError&lt;&lt;P::Input as StreamOnce&gt;::Item, &lt;P::Input as StreamOnce&gt;::Range, &lt;P::Input as StreamOnce&gt;::Position&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Input: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Copy, P2:&nbsp;Copy&gt; Copy for With&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P1:&nbsp;Copy, P2:&nbsp;Copy&gt; Copy for Skip&lt;P1, P2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P1: Parser,<br>&nbsp;&nbsp;&nbsp;&nbsp;P2: Parser,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for Then&lt;P, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for ThenPartial&lt;P, F&gt;","synthetic":false,"types":[]}];
implementors["console"] = [{"text":"impl Copy for TermTarget","synthetic":false,"types":[]},{"text":"impl Copy for TermFamily","synthetic":false,"types":[]},{"text":"impl Copy for Color","synthetic":false,"types":[]},{"text":"impl Copy for Attribute","synthetic":false,"types":[]},{"text":"impl Copy for Alignment","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Copy for Emoji&lt;'a, 'b&gt;","synthetic":false,"types":[]}];
implementors["crates_io"] = [{"text":"impl Copy for Auth","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RecvError","synthetic":false,"types":[]},{"text":"impl Copy for TryRecvError","synthetic":false,"types":[]},{"text":"impl Copy for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Copy for TrySelectError","synthetic":false,"types":[]},{"text":"impl Copy for SelectTimeoutError","synthetic":false,"types":[]},{"text":"impl Copy for TryReadyError","synthetic":false,"types":[]},{"text":"impl Copy for ReadyTimeoutError","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable, '_&gt; Copy for Shared&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CachePadded&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crypto_hash"] = [{"text":"impl Copy for Algorithm","synthetic":false,"types":[]}];
implementors["curl"] = [{"text":"impl Copy for ProxyType","synthetic":false,"types":[]},{"text":"impl Copy for TimeCondition","synthetic":false,"types":[]},{"text":"impl Copy for IpResolve","synthetic":false,"types":[]},{"text":"impl Copy for HttpVersion","synthetic":false,"types":[]},{"text":"impl Copy for SslVersion","synthetic":false,"types":[]},{"text":"impl Copy for SeekResult","synthetic":false,"types":[]},{"text":"impl Copy for InfoType","synthetic":false,"types":[]},{"text":"impl Copy for NetRc","synthetic":false,"types":[]}];
implementors["determinator"] = [{"text":"impl Copy for DeterminatorPostRule","synthetic":false,"types":[]},{"text":"impl Copy for PathMatch","synthetic":false,"types":[]},{"text":"impl Copy for RuleIndex","synthetic":false,"types":[]}];
implementors["diffus"] = [{"text":"impl Copy for Edit","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Copy, R:&nbsp;Copy&gt; Copy for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["env_logger"] = [{"text":"impl Copy for Target","synthetic":false,"types":[]},{"text":"impl Copy for WriteStyle","synthetic":false,"types":[]},{"text":"impl Copy for TimestampPrecision","synthetic":false,"types":[]}];
implementors["filetime"] = [{"text":"impl Copy for FileTime","synthetic":false,"types":[]}];
implementors["fixture_manager"] = [{"text":"impl Copy for GenerateSummariesMode","synthetic":false,"types":[]}];
implementors["fixtures"] = [{"text":"impl&lt;'a&gt; Copy for DirectionDesc&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Copy for FlushCompress","synthetic":false,"types":[]},{"text":"impl Copy for FlushDecompress","synthetic":false,"types":[]},{"text":"impl Copy for Status","synthetic":false,"types":[]},{"text":"impl Copy for Compression","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl Copy for ErrorCode","synthetic":false,"types":[]},{"text":"impl Copy for ErrorClass","synthetic":false,"types":[]},{"text":"impl Copy for RepositoryState","synthetic":false,"types":[]},{"text":"impl Copy for Direction","synthetic":false,"types":[]},{"text":"impl Copy for ResetType","synthetic":false,"types":[]},{"text":"impl Copy for ObjectType","synthetic":false,"types":[]},{"text":"impl Copy for ReferenceType","synthetic":false,"types":[]},{"text":"impl Copy for BranchType","synthetic":false,"types":[]},{"text":"impl Copy for ConfigLevel","synthetic":false,"types":[]},{"text":"impl Copy for FileFavor","synthetic":false,"types":[]},{"text":"impl Copy for Sort","synthetic":false,"types":[]},{"text":"impl Copy for CredentialType","synthetic":false,"types":[]},{"text":"impl Copy for IndexEntryFlag","synthetic":false,"types":[]},{"text":"impl Copy for IndexEntryExtendedFlag","synthetic":false,"types":[]},{"text":"impl Copy for IndexAddOption","synthetic":false,"types":[]},{"text":"impl Copy for RepositoryOpenFlags","synthetic":false,"types":[]},{"text":"impl Copy for RevparseMode","synthetic":false,"types":[]},{"text":"impl Copy for MergeAnalysis","synthetic":false,"types":[]},{"text":"impl Copy for MergePreference","synthetic":false,"types":[]},{"text":"impl Copy for CloneLocal","synthetic":false,"types":[]},{"text":"impl Copy for Service","synthetic":false,"types":[]},{"text":"impl Copy for ApplyLocation","synthetic":false,"types":[]},{"text":"impl Copy for DiffBinaryKind","synthetic":false,"types":[]},{"text":"impl Copy for Oid","synthetic":false,"types":[]},{"text":"impl Copy for PackBuilderStage","synthetic":false,"types":[]},{"text":"impl Copy for StatusShow","synthetic":false,"types":[]},{"text":"impl Copy for Time","synthetic":false,"types":[]},{"text":"impl Copy for IndexTime","synthetic":false,"types":[]},{"text":"impl Copy for Status","synthetic":false,"types":[]},{"text":"impl Copy for RepositoryInitMode","synthetic":false,"types":[]},{"text":"impl Copy for Delta","synthetic":false,"types":[]},{"text":"impl Copy for FileMode","synthetic":false,"types":[]},{"text":"impl Copy for SubmoduleStatus","synthetic":false,"types":[]},{"text":"impl Copy for PathspecFlags","synthetic":false,"types":[]},{"text":"impl Copy for CheckoutNotificationType","synthetic":false,"types":[]},{"text":"impl Copy for DiffFormat","synthetic":false,"types":[]},{"text":"impl Copy for DiffStatsFormat","synthetic":false,"types":[]},{"text":"impl Copy for StashApplyFlags","synthetic":false,"types":[]},{"text":"impl Copy for StashFlags","synthetic":false,"types":[]},{"text":"impl Copy for AttrCheckFlags","synthetic":false,"types":[]},{"text":"impl Copy for DiffFlags","synthetic":false,"types":[]},{"text":"impl Copy for ReferenceFormat","synthetic":false,"types":[]}];
implementors["glob"] = [{"text":"impl Copy for MatchOptions","synthetic":false,"types":[]}];
implementors["guppy"] = [{"text":"impl Copy for DependencyKind","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for BuildTargetId&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Copy for CargoResolverVersion","synthetic":false,"types":[]},{"text":"impl&lt;'g, 'a&gt; Copy for DisplayFeatures&lt;'g, 'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for FeatureGraph&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for FeatureId&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for FeatureMetadata&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for CrossLink&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FeatureType","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for PackageMetadata&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for PackageSource&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for PackageLink&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for EnabledStatus&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for PlatformStatus&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Copy for EnabledTernary","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Copy for PlatformEval&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Copy for DependencyDirection","synthetic":false,"types":[]}];
implementors["guppy_summaries"] = [{"text":"impl Copy for SummaryDiffTag","synthetic":false,"types":[]},{"text":"impl Copy for PackageStatus","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Copy for FromHexError","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Duration","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["idna"] = [{"text":"impl Copy for Config","synthetic":false,"types":[]}];
implementors["ignore"] = [{"text":"impl Copy for WalkState","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Copy for DIR","synthetic":false,"types":[]},{"text":"impl Copy for group","synthetic":false,"types":[]},{"text":"impl Copy for utimbuf","synthetic":false,"types":[]},{"text":"impl Copy for timeval","synthetic":false,"types":[]},{"text":"impl Copy for timespec","synthetic":false,"types":[]},{"text":"impl Copy for rlimit","synthetic":false,"types":[]},{"text":"impl Copy for rusage","synthetic":false,"types":[]},{"text":"impl Copy for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Copy for hostent","synthetic":false,"types":[]},{"text":"impl Copy for iovec","synthetic":false,"types":[]},{"text":"impl Copy for pollfd","synthetic":false,"types":[]},{"text":"impl Copy for winsize","synthetic":false,"types":[]},{"text":"impl Copy for linger","synthetic":false,"types":[]},{"text":"impl Copy for sigval","synthetic":false,"types":[]},{"text":"impl Copy for itimerval","synthetic":false,"types":[]},{"text":"impl Copy for tms","synthetic":false,"types":[]},{"text":"impl Copy for servent","synthetic":false,"types":[]},{"text":"impl Copy for protoent","synthetic":false,"types":[]},{"text":"impl Copy for FILE","synthetic":false,"types":[]},{"text":"impl Copy for fpos_t","synthetic":false,"types":[]},{"text":"impl Copy for timezone","synthetic":false,"types":[]},{"text":"impl Copy for in_addr","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Copy for addrinfo","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Copy for fd_set","synthetic":false,"types":[]},{"text":"impl Copy for tm","synthetic":false,"types":[]},{"text":"impl Copy for sched_param","synthetic":false,"types":[]},{"text":"impl Copy for Dl_info","synthetic":false,"types":[]},{"text":"impl Copy for lconv","synthetic":false,"types":[]},{"text":"impl Copy for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for ifaddrs","synthetic":false,"types":[]},{"text":"impl Copy for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Copy for arpreq","synthetic":false,"types":[]},{"text":"impl Copy for arpreq_old","synthetic":false,"types":[]},{"text":"impl Copy for arphdr","synthetic":false,"types":[]},{"text":"impl Copy for mmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for epoll_event","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Copy for utsname","synthetic":false,"types":[]},{"text":"impl Copy for sigevent","synthetic":false,"types":[]},{"text":"impl Copy for fpos64_t","synthetic":false,"types":[]},{"text":"impl Copy for rlimit64","synthetic":false,"types":[]},{"text":"impl Copy for glob_t","synthetic":false,"types":[]},{"text":"impl Copy for passwd","synthetic":false,"types":[]},{"text":"impl Copy for spwd","synthetic":false,"types":[]},{"text":"impl Copy for dqblk","synthetic":false,"types":[]},{"text":"impl Copy for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Copy for itimerspec","synthetic":false,"types":[]},{"text":"impl Copy for fsid_t","synthetic":false,"types":[]},{"text":"impl Copy for packet_mreq","synthetic":false,"types":[]},{"text":"impl Copy for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Copy for if_nameindex","synthetic":false,"types":[]},{"text":"impl Copy for msginfo","synthetic":false,"types":[]},{"text":"impl Copy for sembuf","synthetic":false,"types":[]},{"text":"impl Copy for input_event","synthetic":false,"types":[]},{"text":"impl Copy for input_id","synthetic":false,"types":[]},{"text":"impl Copy for input_absinfo","synthetic":false,"types":[]},{"text":"impl Copy for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Copy for input_mask","synthetic":false,"types":[]},{"text":"impl Copy for ff_replay","synthetic":false,"types":[]},{"text":"impl Copy for ff_trigger","synthetic":false,"types":[]},{"text":"impl Copy for ff_envelope","synthetic":false,"types":[]},{"text":"impl Copy for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_effect","synthetic":false,"types":[]},{"text":"impl Copy for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Copy for ucred","synthetic":false,"types":[]},{"text":"impl Copy for mntent","synthetic":false,"types":[]},{"text":"impl Copy for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Copy for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Copy for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for arpd_request","synthetic":false,"types":[]},{"text":"impl Copy for inotify_event","synthetic":false,"types":[]},{"text":"impl Copy for fanotify_response","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Copy for regmatch_t","synthetic":false,"types":[]},{"text":"impl Copy for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Copy for dirent","synthetic":false,"types":[]},{"text":"impl Copy for dirent64","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Copy for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Copy for mq_attr","synthetic":false,"types":[]},{"text":"impl Copy for statx","synthetic":false,"types":[]},{"text":"impl Copy for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Copy for aiocb","synthetic":false,"types":[]},{"text":"impl Copy for __exit_status","synthetic":false,"types":[]},{"text":"impl Copy for __timeval","synthetic":false,"types":[]},{"text":"impl Copy for glob64_t","synthetic":false,"types":[]},{"text":"impl Copy for msghdr","synthetic":false,"types":[]},{"text":"impl Copy for cmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for termios","synthetic":false,"types":[]},{"text":"impl Copy for mallinfo","synthetic":false,"types":[]},{"text":"impl Copy for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Copy for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Copy for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Copy for nlattr","synthetic":false,"types":[]},{"text":"impl Copy for rtentry","synthetic":false,"types":[]},{"text":"impl Copy for timex","synthetic":false,"types":[]},{"text":"impl Copy for ntptimeval","synthetic":false,"types":[]},{"text":"impl Copy for regex_t","synthetic":false,"types":[]},{"text":"impl Copy for utmpx","synthetic":false,"types":[]},{"text":"impl Copy for sigset_t","synthetic":false,"types":[]},{"text":"impl Copy for sysinfo","synthetic":false,"types":[]},{"text":"impl Copy for msqid_ds","synthetic":false,"types":[]},{"text":"impl Copy for sigaction","synthetic":false,"types":[]},{"text":"impl Copy for statfs","synthetic":false,"types":[]},{"text":"impl Copy for flock","synthetic":false,"types":[]},{"text":"impl Copy for flock64","synthetic":false,"types":[]},{"text":"impl Copy for siginfo_t","synthetic":false,"types":[]},{"text":"impl Copy for stack_t","synthetic":false,"types":[]},{"text":"impl Copy for stat","synthetic":false,"types":[]},{"text":"impl Copy for stat64","synthetic":false,"types":[]},{"text":"impl Copy for statfs64","synthetic":false,"types":[]},{"text":"impl Copy for statvfs64","synthetic":false,"types":[]},{"text":"impl Copy for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Copy for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Copy for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Copy for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Copy for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Copy for user","synthetic":false,"types":[]},{"text":"impl Copy for mcontext_t","synthetic":false,"types":[]},{"text":"impl Copy for ipc_perm","synthetic":false,"types":[]},{"text":"impl Copy for shmid_ds","synthetic":false,"types":[]},{"text":"impl Copy for termios2","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Copy for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Copy for ucontext_t","synthetic":false,"types":[]},{"text":"impl Copy for statvfs","synthetic":false,"types":[]},{"text":"impl Copy for max_align_t","synthetic":false,"types":[]},{"text":"impl Copy for sem_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Copy for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Copy for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Copy for in6_addr","synthetic":false,"types":[]}];
implementors["libgit2_sys"] = [{"text":"impl Copy for git_oid","synthetic":false,"types":[]},{"text":"impl Copy for git_strarray","synthetic":false,"types":[]},{"text":"impl Copy for git_oidarray","synthetic":false,"types":[]},{"text":"impl Copy for git_time","synthetic":false,"types":[]},{"text":"impl Copy for git_indexer_progress","synthetic":false,"types":[]},{"text":"impl Copy for git_buf","synthetic":false,"types":[]},{"text":"impl Copy for git_blame_options","synthetic":false,"types":[]},{"text":"impl Copy for git_blame_hunk","synthetic":false,"types":[]},{"text":"impl Copy for git_index_entry","synthetic":false,"types":[]},{"text":"impl Copy for git_index_time","synthetic":false,"types":[]}];
implementors["libnghttp2_sys"] = [{"text":"impl Copy for nghttp2_session","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_info","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_vec","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_rcbuf","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_nv","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_frame_hd","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_data_source","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_data_provider","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_data","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_priority_spec","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_headers","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_priority","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_rst_stream","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_settings_entry","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_settings","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_push_promise","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_ping","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_goaway","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_window_update","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_extension","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_frame","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_session_callbacks","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_mem","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_option","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_ext_altsvc","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_origin_entry","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_ext_origin","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_hd_deflater","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_hd_inflater","synthetic":false,"types":[]},{"text":"impl Copy for nghttp2_stream","synthetic":false,"types":[]}];
implementors["libssh2_sys"] = [{"text":"impl Copy for LIBSSH2_SFTP_ATTRIBUTES","synthetic":false,"types":[]},{"text":"impl Copy for LIBSSH2_SFTP_STATVFS","synthetic":false,"types":[]}];
implementors["libz_sys"] = [{"text":"impl Copy for gz_header","synthetic":false,"types":[]},{"text":"impl Copy for z_stream","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for LevelFilter","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Copy for CMSOptions","synthetic":false,"types":[]},{"text":"impl Copy for PointConversionForm","synthetic":false,"types":[]},{"text":"impl Copy for Asn1Flag","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Copy for Index&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl Copy for MessageDigest","synthetic":false,"types":[]},{"text":"impl Copy for DigestBytes","synthetic":false,"types":[]},{"text":"impl Copy for Nid","synthetic":false,"types":[]},{"text":"impl Copy for OcspFlag","synthetic":false,"types":[]},{"text":"impl Copy for OcspResponseStatus","synthetic":false,"types":[]},{"text":"impl Copy for OcspCertStatus","synthetic":false,"types":[]},{"text":"impl Copy for OcspRevokedStatus","synthetic":false,"types":[]},{"text":"impl Copy for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl Copy for Id","synthetic":false,"types":[]},{"text":"impl Copy for Padding","synthetic":false,"types":[]},{"text":"impl Copy for SrtpProfileId","synthetic":false,"types":[]},{"text":"impl Copy for ErrorCode","synthetic":false,"types":[]},{"text":"impl Copy for SslOptions","synthetic":false,"types":[]},{"text":"impl Copy for SslMode","synthetic":false,"types":[]},{"text":"impl Copy for SslMethod","synthetic":false,"types":[]},{"text":"impl Copy for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl Copy for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl Copy for ExtensionContext","synthetic":false,"types":[]},{"text":"impl Copy for SslFiletype","synthetic":false,"types":[]},{"text":"impl Copy for StatusType","synthetic":false,"types":[]},{"text":"impl Copy for NameType","synthetic":false,"types":[]},{"text":"impl Copy for SniError","synthetic":false,"types":[]},{"text":"impl Copy for SslAlert","synthetic":false,"types":[]},{"text":"impl Copy for AlpnError","synthetic":false,"types":[]},{"text":"impl Copy for ClientHelloResponse","synthetic":false,"types":[]},{"text":"impl Copy for SslVersion","synthetic":false,"types":[]},{"text":"impl Copy for ShutdownResult","synthetic":false,"types":[]},{"text":"impl Copy for ShutdownState","synthetic":false,"types":[]},{"text":"impl Copy for Mode","synthetic":false,"types":[]},{"text":"impl Copy for Cipher","synthetic":false,"types":[]},{"text":"impl Copy for X509CheckFlags","synthetic":false,"types":[]},{"text":"impl Copy for X509VerifyResult","synthetic":false,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Copy for point_conversion_form_t","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl Copy for Lookahead","synthetic":false,"types":[]},{"text":"impl Copy for Atomicity","synthetic":false,"types":[]},{"text":"impl Copy for MatchDir","synthetic":false,"types":[]},{"text":"impl Copy for Assoc","synthetic":false,"types":[]}];
implementors["petgraph"] = [{"text":"impl Copy for Time","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for DfsEvent&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Copy&gt; Copy for Control&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for NodeFiltered&lt;G, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Copy, F:&nbsp;Copy&gt; Copy for EdgeFiltered&lt;G, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Copy&gt; Copy for Reversed&lt;G&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Copy&gt; Copy for ReversedEdgeReference&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix:&nbsp;Copy&gt; Copy for EdgeReference&lt;'a, E, Ty, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Copy&gt; Copy for NodeIndex&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Copy&gt; Copy for EdgeIndex&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ix:&nbsp;IndexType&gt; Copy for EdgeReference&lt;'a, E, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'b, T&gt; Copy for Ptr&lt;'b, T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Direction","synthetic":false,"types":[]},{"text":"impl Copy for Directed","synthetic":false,"types":[]},{"text":"impl Copy for Undirected","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Copy for YesS3","synthetic":false,"types":[]},{"text":"impl Copy for NoS3","synthetic":false,"types":[]},{"text":"impl Copy for YesS4","synthetic":false,"types":[]},{"text":"impl Copy for NoS4","synthetic":false,"types":[]},{"text":"impl Copy for YesA1","synthetic":false,"types":[]},{"text":"impl Copy for NoA1","synthetic":false,"types":[]},{"text":"impl Copy for YesA2","synthetic":false,"types":[]},{"text":"impl Copy for NoA2","synthetic":false,"types":[]},{"text":"impl Copy for YesNI","synthetic":false,"types":[]},{"text":"impl Copy for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Copy, S4:&nbsp;Copy, NI:&nbsp;Copy&gt; Copy for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Copy&gt; Copy for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Copy for vec128_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec256_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec512_storage","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Delimiter","synthetic":false,"types":[]},{"text":"impl Copy for Spacing","synthetic":false,"types":[]}];
implementors["proc_macro_error"] = [{"text":"impl Copy for SpanRange","synthetic":false,"types":[]}];
implementors["proptest"] = [{"text":"impl&lt;S:&nbsp;Copy, T:&nbsp;Copy&gt; Copy for UniformArrayStrategy&lt;S, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for ArrayValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + BitSetLike&gt; Copy for BitSetStrategy&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + BitSetLike&gt; Copy for BitSetValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for Weighted","synthetic":false,"types":[]},{"text":"impl Copy for BoolValueTree","synthetic":false,"types":[]},{"text":"impl Copy for CharValueTree","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl Copy for Any","synthetic":false,"types":[]},{"text":"impl Copy for BinarySearch","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for Flatten&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for IndFlatten&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Fuse&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Clone + Debug&gt; Copy for Just&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;Copy + Fn() -&gt; T&gt; Copy for LazyJust&lt;T, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for NoShrink&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for CheckStrategySanityOptions","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for TupleUnion&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for TupleUnionValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FileFailurePersistence","synthetic":false,"types":[]},{"text":"impl Copy for RngAlgorithm","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for TupleValueTree&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Probability","synthetic":false,"types":[]},{"text":"impl Copy for Index","synthetic":false,"types":[]},{"text":"impl Copy for StringParam","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Copy for Bernoulli","synthetic":false,"types":[]},{"text":"impl Copy for BernoulliError","synthetic":false,"types":[]},{"text":"impl Copy for Binomial","synthetic":false,"types":[]},{"text":"impl Copy for Cauchy","synthetic":false,"types":[]},{"text":"impl Copy for Exp1","synthetic":false,"types":[]},{"text":"impl Copy for Exp","synthetic":false,"types":[]},{"text":"impl Copy for Gamma","synthetic":false,"types":[]},{"text":"impl Copy for ChiSquared","synthetic":false,"types":[]},{"text":"impl Copy for FisherF","synthetic":false,"types":[]},{"text":"impl Copy for StudentT","synthetic":false,"types":[]},{"text":"impl Copy for Beta","synthetic":false,"types":[]},{"text":"impl Copy for StandardNormal","synthetic":false,"types":[]},{"text":"impl Copy for Normal","synthetic":false,"types":[]},{"text":"impl Copy for LogNormal","synthetic":false,"types":[]},{"text":"impl Copy for Pareto","synthetic":false,"types":[]},{"text":"impl Copy for Poisson","synthetic":false,"types":[]},{"text":"impl Copy for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy + SampleUniform&gt; Copy for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UniformDuration","synthetic":false,"types":[]},{"text":"impl Copy for UnitCircle","synthetic":false,"types":[]},{"text":"impl Copy for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Copy for Weibull","synthetic":false,"types":[]},{"text":"impl Copy for WeightedError","synthetic":false,"types":[]},{"text":"impl Copy for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Copy for Open01","synthetic":false,"types":[]},{"text":"impl Copy for Standard","synthetic":false,"types":[]},{"text":"impl Copy for ThreadRng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Copy for OsRng","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl Copy for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Copy for Flag","synthetic":false,"types":[]},{"text":"impl Copy for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Copy for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Range","synthetic":false,"types":[]}];
implementors["rustfix"] = [{"text":"impl Copy for Applicability","synthetic":false,"types":[]},{"text":"impl Copy for Filter","synthetic":false,"types":[]},{"text":"impl Copy for LinePosition","synthetic":false,"types":[]},{"text":"impl Copy for LineRange","synthetic":false,"types":[]}];
implementors["rusty_fork"] = [{"text":"impl Copy for ExitStatusWrapper","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Copy for Compat","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl&lt;E&gt; Copy for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Copy for Category","synthetic":false,"types":[]}];
implementors["socket2"] = [{"text":"impl Copy for Domain","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Protocol","synthetic":false,"types":[]}];
implementors["supercow"] = [{"text":"impl&lt;A:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for InlineStorage&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl Copy for BoxedStorage","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Copy for Underscore","synthetic":false,"types":[]},{"text":"impl Copy for Abstract","synthetic":false,"types":[]},{"text":"impl Copy for As","synthetic":false,"types":[]},{"text":"impl Copy for Async","synthetic":false,"types":[]},{"text":"impl Copy for Auto","synthetic":false,"types":[]},{"text":"impl Copy for Become","synthetic":false,"types":[]},{"text":"impl Copy for Box","synthetic":false,"types":[]},{"text":"impl Copy for Break","synthetic":false,"types":[]},{"text":"impl Copy for Const","synthetic":false,"types":[]},{"text":"impl Copy for Continue","synthetic":false,"types":[]},{"text":"impl Copy for Crate","synthetic":false,"types":[]},{"text":"impl Copy for Default","synthetic":false,"types":[]},{"text":"impl Copy for Do","synthetic":false,"types":[]},{"text":"impl Copy for Dyn","synthetic":false,"types":[]},{"text":"impl Copy for Else","synthetic":false,"types":[]},{"text":"impl Copy for Enum","synthetic":false,"types":[]},{"text":"impl Copy for Existential","synthetic":false,"types":[]},{"text":"impl Copy for Extern","synthetic":false,"types":[]},{"text":"impl Copy for Final","synthetic":false,"types":[]},{"text":"impl Copy for Fn","synthetic":false,"types":[]},{"text":"impl Copy for For","synthetic":false,"types":[]},{"text":"impl Copy for If","synthetic":false,"types":[]},{"text":"impl Copy for Impl","synthetic":false,"types":[]},{"text":"impl Copy for In","synthetic":false,"types":[]},{"text":"impl Copy for Let","synthetic":false,"types":[]},{"text":"impl Copy for Loop","synthetic":false,"types":[]},{"text":"impl Copy for Macro","synthetic":false,"types":[]},{"text":"impl Copy for Match","synthetic":false,"types":[]},{"text":"impl Copy for Mod","synthetic":false,"types":[]},{"text":"impl Copy for Move","synthetic":false,"types":[]},{"text":"impl Copy for Mut","synthetic":false,"types":[]},{"text":"impl Copy for Override","synthetic":false,"types":[]},{"text":"impl Copy for Priv","synthetic":false,"types":[]},{"text":"impl Copy for Pub","synthetic":false,"types":[]},{"text":"impl Copy for Ref","synthetic":false,"types":[]},{"text":"impl Copy for Return","synthetic":false,"types":[]},{"text":"impl Copy for SelfType","synthetic":false,"types":[]},{"text":"impl Copy for SelfValue","synthetic":false,"types":[]},{"text":"impl Copy for Static","synthetic":false,"types":[]},{"text":"impl Copy for Struct","synthetic":false,"types":[]},{"text":"impl Copy for Super","synthetic":false,"types":[]},{"text":"impl Copy for Trait","synthetic":false,"types":[]},{"text":"impl Copy for Try","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Typeof","synthetic":false,"types":[]},{"text":"impl Copy for Union","synthetic":false,"types":[]},{"text":"impl Copy for Unsafe","synthetic":false,"types":[]},{"text":"impl Copy for Unsized","synthetic":false,"types":[]},{"text":"impl Copy for Use","synthetic":false,"types":[]},{"text":"impl Copy for Virtual","synthetic":false,"types":[]},{"text":"impl Copy for Where","synthetic":false,"types":[]},{"text":"impl Copy for While","synthetic":false,"types":[]},{"text":"impl Copy for Yield","synthetic":false,"types":[]},{"text":"impl Copy for Add","synthetic":false,"types":[]},{"text":"impl Copy for AddEq","synthetic":false,"types":[]},{"text":"impl Copy for And","synthetic":false,"types":[]},{"text":"impl Copy for AndAnd","synthetic":false,"types":[]},{"text":"impl Copy for AndEq","synthetic":false,"types":[]},{"text":"impl Copy for At","synthetic":false,"types":[]},{"text":"impl Copy for Bang","synthetic":false,"types":[]},{"text":"impl Copy for Caret","synthetic":false,"types":[]},{"text":"impl Copy for CaretEq","synthetic":false,"types":[]},{"text":"impl Copy for Colon","synthetic":false,"types":[]},{"text":"impl Copy for Colon2","synthetic":false,"types":[]},{"text":"impl Copy for Comma","synthetic":false,"types":[]},{"text":"impl Copy for Div","synthetic":false,"types":[]},{"text":"impl Copy for DivEq","synthetic":false,"types":[]},{"text":"impl Copy for Dollar","synthetic":false,"types":[]},{"text":"impl Copy for Dot","synthetic":false,"types":[]},{"text":"impl Copy for Dot2","synthetic":false,"types":[]},{"text":"impl Copy for Dot3","synthetic":false,"types":[]},{"text":"impl Copy for DotDotEq","synthetic":false,"types":[]},{"text":"impl Copy for Eq","synthetic":false,"types":[]},{"text":"impl Copy for EqEq","synthetic":false,"types":[]},{"text":"impl Copy for Ge","synthetic":false,"types":[]},{"text":"impl Copy for Gt","synthetic":false,"types":[]},{"text":"impl Copy for Le","synthetic":false,"types":[]},{"text":"impl Copy for Lt","synthetic":false,"types":[]},{"text":"impl Copy for MulEq","synthetic":false,"types":[]},{"text":"impl Copy for Ne","synthetic":false,"types":[]},{"text":"impl Copy for Or","synthetic":false,"types":[]},{"text":"impl Copy for OrEq","synthetic":false,"types":[]},{"text":"impl Copy for OrOr","synthetic":false,"types":[]},{"text":"impl Copy for Pound","synthetic":false,"types":[]},{"text":"impl Copy for Question","synthetic":false,"types":[]},{"text":"impl Copy for RArrow","synthetic":false,"types":[]},{"text":"impl Copy for LArrow","synthetic":false,"types":[]},{"text":"impl Copy for Rem","synthetic":false,"types":[]},{"text":"impl Copy for RemEq","synthetic":false,"types":[]},{"text":"impl Copy for FatArrow","synthetic":false,"types":[]},{"text":"impl Copy for Semi","synthetic":false,"types":[]},{"text":"impl Copy for Shl","synthetic":false,"types":[]},{"text":"impl Copy for ShlEq","synthetic":false,"types":[]},{"text":"impl Copy for Shr","synthetic":false,"types":[]},{"text":"impl Copy for ShrEq","synthetic":false,"types":[]},{"text":"impl Copy for Star","synthetic":false,"types":[]},{"text":"impl Copy for Sub","synthetic":false,"types":[]},{"text":"impl Copy for SubEq","synthetic":false,"types":[]},{"text":"impl Copy for Tilde","synthetic":false,"types":[]},{"text":"impl Copy for Brace","synthetic":false,"types":[]},{"text":"impl Copy for Bracket","synthetic":false,"types":[]},{"text":"impl Copy for Paren","synthetic":false,"types":[]},{"text":"impl Copy for Group","synthetic":false,"types":[]},{"text":"impl Copy for AttrStyle","synthetic":false,"types":[]},{"text":"impl Copy for RangeLimits","synthetic":false,"types":[]},{"text":"impl Copy for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Copy for BinOp","synthetic":false,"types":[]},{"text":"impl Copy for UnOp","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Copy for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]}];
implementors["tar"] = [{"text":"impl Copy for EntryType","synthetic":false,"types":[]},{"text":"impl Copy for HeaderMode","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Copy for ColorChoice","synthetic":false,"types":[]},{"text":"impl Copy for Color","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Copy for Duration","synthetic":false,"types":[]},{"text":"impl Copy for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Copy for Timespec","synthetic":false,"types":[]},{"text":"impl Copy for PreciseTime","synthetic":false,"types":[]},{"text":"impl Copy for SteadyTime","synthetic":false,"types":[]},{"text":"impl Copy for Tm","synthetic":false,"types":[]},{"text":"impl Copy for ParseError","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Copy + Array&gt; Copy for ArrayVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Copy for B0","synthetic":false,"types":[]},{"text":"impl Copy for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Z0","synthetic":false,"types":[]},{"text":"impl Copy for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Copy, A:&nbsp;Copy&gt; Copy for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Greater","synthetic":false,"types":[]},{"text":"impl Copy for Less","synthetic":false,"types":[]},{"text":"impl Copy for Equal","synthetic":false,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl&lt;'a&gt; Copy for TrieSetSlice&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for BidiClass","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl Copy for ParseError","synthetic":false,"types":[]},{"text":"impl Copy for SyntaxViolation","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Parse&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for ParseOptions&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["void"] = [{"text":"impl Copy for Void","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()