(function() {var implementors = {};
implementors["bstr"] = [{"text":"impl Serialize for BStr","synthetic":false,"types":[]},{"text":"impl Serialize for BString","synthetic":false,"types":[]}];
implementors["cargo"] = [{"text":"impl Serialize for CompileMode","synthetic":false,"types":[]},{"text":"impl Serialize for CompileKind","synthetic":false,"types":[]},{"text":"impl Serialize for CompileTarget","synthetic":false,"types":[]},{"text":"impl Serialize for CrateType","synthetic":false,"types":[]},{"text":"impl Serialize for Dependency","synthetic":false,"types":[]},{"text":"impl Serialize for DepKind","synthetic":false,"types":[]},{"text":"impl Serialize for Edition","synthetic":false,"types":[]},{"text":"impl Serialize for InternedString","synthetic":false,"types":[]},{"text":"impl Serialize for TargetKind","synthetic":false,"types":[]},{"text":"impl Serialize for Target","synthetic":false,"types":[]},{"text":"impl Serialize for Package","synthetic":false,"types":[]},{"text":"impl Serialize for PackageId","synthetic":false,"types":[]},{"text":"impl Serialize for PackageIdSpec","synthetic":false,"types":[]},{"text":"impl Serialize for Profile","synthetic":false,"types":[]},{"text":"impl Serialize for Lto","synthetic":false,"types":[]},{"text":"impl Serialize for PanicStrategy","synthetic":false,"types":[]},{"text":"impl Serialize for Strip","synthetic":false,"types":[]},{"text":"impl Serialize for EncodableResolve","synthetic":false,"types":[]},{"text":"impl Serialize for EncodableDependency","synthetic":false,"types":[]},{"text":"impl Serialize for EncodablePackageId","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Serialize for Resolve","synthetic":false,"types":[]},{"text":"impl Serialize for SourceId","synthetic":false,"types":[]},{"text":"impl Serialize for FeatureValue","synthetic":false,"types":[]},{"text":"impl Serialize for ExportInfo","synthetic":false,"types":[]},{"text":"impl Serialize for GitRevision","synthetic":false,"types":[]},{"text":"impl Serialize for GitRemote","synthetic":false,"types":[]},{"text":"impl Serialize for GitDatabase","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Serialize for GitCheckout&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for Message","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Serialize for FromCompiler&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Serialize for Artifact&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for ArtifactProfile","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Serialize for BuildScript&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Serialize for TimingInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for BuildFinished","synthetic":false,"types":[]},{"text":"impl Serialize for TomlDependency","synthetic":false,"types":[]},{"text":"impl Serialize for DetailedTomlDependency","synthetic":false,"types":[]},{"text":"impl Serialize for TomlManifest","synthetic":false,"types":[]},{"text":"impl Serialize for TomlProfiles","synthetic":false,"types":[]},{"text":"impl Serialize for TomlOptLevel","synthetic":false,"types":[]},{"text":"impl Serialize for U32OrBool","synthetic":false,"types":[]},{"text":"impl Serialize for TomlProfile","synthetic":false,"types":[]},{"text":"impl Serialize for ProfilePackageSpec","synthetic":false,"types":[]},{"text":"impl Serialize for StringOrVec","synthetic":false,"types":[]},{"text":"impl Serialize for StringOrBool","synthetic":false,"types":[]},{"text":"impl Serialize for VecStringOrBool","synthetic":false,"types":[]},{"text":"impl Serialize for TomlProject","synthetic":false,"types":[]},{"text":"impl Serialize for TomlWorkspace","synthetic":false,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl Serialize for DependencyKind","synthetic":false,"types":[]},{"text":"impl Serialize for Dependency","synthetic":false,"types":[]},{"text":"impl Serialize for DiagnosticCode","synthetic":false,"types":[]},{"text":"impl Serialize for DiagnosticSpanLine","synthetic":false,"types":[]},{"text":"impl Serialize for DiagnosticSpanMacroExpansion","synthetic":false,"types":[]},{"text":"impl Serialize for DiagnosticSpan","synthetic":false,"types":[]},{"text":"impl Serialize for Applicability","synthetic":false,"types":[]},{"text":"impl Serialize for DiagnosticLevel","synthetic":false,"types":[]},{"text":"impl Serialize for Diagnostic","synthetic":false,"types":[]},{"text":"impl Serialize for ArtifactProfile","synthetic":false,"types":[]},{"text":"impl Serialize for Artifact","synthetic":false,"types":[]},{"text":"impl Serialize for CompilerMessage","synthetic":false,"types":[]},{"text":"impl Serialize for BuildScript","synthetic":false,"types":[]},{"text":"impl Serialize for BuildFinished","synthetic":false,"types":[]},{"text":"impl Serialize for Message","synthetic":false,"types":[]},{"text":"impl Serialize for PackageId","synthetic":false,"types":[]},{"text":"impl Serialize for Metadata","synthetic":false,"types":[]},{"text":"impl Serialize for Resolve","synthetic":false,"types":[]},{"text":"impl Serialize for Node","synthetic":false,"types":[]},{"text":"impl Serialize for NodeDep","synthetic":false,"types":[]},{"text":"impl Serialize for DepKindInfo","synthetic":false,"types":[]},{"text":"impl Serialize for Package","synthetic":false,"types":[]},{"text":"impl Serialize for Source","synthetic":false,"types":[]},{"text":"impl Serialize for Target","synthetic":false,"types":[]}];
implementors["cargo_platform"] = [{"text":"impl Serialize for Platform","synthetic":false,"types":[]}];
implementors["crates_io"] = [{"text":"impl Serialize for NewCrate","synthetic":false,"types":[]},{"text":"impl Serialize for NewCrateDependency","synthetic":false,"types":[]}];
implementors["determinator"] = [{"text":"impl Serialize for DeterminatorRules","synthetic":false,"types":[]},{"text":"impl Serialize for PathRule","synthetic":false,"types":[]},{"text":"impl Serialize for DeterminatorPostRule","synthetic":false,"types":[]},{"text":"impl Serialize for PackageRule","synthetic":false,"types":[]},{"text":"impl Serialize for DeterminatorMarkChanged","synthetic":false,"types":[]}];
implementors["guppy"] = [{"text":"impl Serialize for CargoResolverVersion","synthetic":false,"types":[]},{"text":"impl Serialize for CargoOptionsSummary","synthetic":false,"types":[]},{"text":"impl Serialize for CargoMetadata","synthetic":false,"types":[]}];
implementors["guppy_summaries"] = [{"text":"impl&lt;'a&gt; Serialize for SummaryDiff&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Serialize for PackageDiff&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Serialize for SummaryDiffStatus&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M&gt; Serialize for SummaryWithMetadata&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for SummaryId","synthetic":false,"types":[]},{"text":"impl Serialize for SummarySource","synthetic":false,"types":[]},{"text":"impl Serialize for PackageInfo","synthetic":false,"types":[]},{"text":"impl Serialize for PackageStatus","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl Serialize for Identifier","synthetic":false,"types":[]},{"text":"impl Serialize for Version","synthetic":false,"types":[]},{"text":"impl Serialize for VersionReq","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Serialize for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for Value","synthetic":false,"types":[]},{"text":"impl Serialize for Number","synthetic":false,"types":[]},{"text":"impl Serialize for RawValue","synthetic":false,"types":[]}];
implementors["target_spec"] = [{"text":"impl Serialize for PlatformSummary","synthetic":false,"types":[]},{"text":"impl Serialize for TargetFeaturesSummary","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Serialize for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for Value","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()