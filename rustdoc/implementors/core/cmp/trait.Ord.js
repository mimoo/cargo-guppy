(function() {var implementors = {};
implementors["ascii"] = [{"text":"impl Ord for AsciiChar","synthetic":false,"types":[]},{"text":"impl Ord for AsciiStr","synthetic":false,"types":[]},{"text":"impl Ord for AsciiString","synthetic":false,"types":[]}];
implementors["bit_set"] = [{"text":"impl&lt;B:&nbsp;BitBlock&gt; Ord for BitSet&lt;B&gt;","synthetic":false,"types":[]}];
implementors["bit_vec"] = [{"text":"impl&lt;B:&nbsp;BitBlock&gt; Ord for BitVec&lt;B&gt;","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl Ord for BString","synthetic":false,"types":[]},{"text":"impl Ord for BStr","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Ord for BigEndian","synthetic":false,"types":[]},{"text":"impl Ord for LittleEndian","synthetic":false,"types":[]}];
implementors["bytesize"] = [{"text":"impl Ord for ByteSize","synthetic":false,"types":[]}];
implementors["cargo"] = [{"text":"impl Ord for CompileMode","synthetic":false,"types":[]},{"text":"impl Ord for CompileKind","synthetic":false,"types":[]},{"text":"impl Ord for CompileTarget","synthetic":false,"types":[]},{"text":"impl Ord for Metadata","synthetic":false,"types":[]},{"text":"impl Ord for CrateType","synthetic":false,"types":[]},{"text":"impl Ord for Unit","synthetic":false,"types":[]},{"text":"impl Ord for UnitDep","synthetic":false,"types":[]},{"text":"impl Ord for Dependency","synthetic":false,"types":[]},{"text":"impl Ord for DepKind","synthetic":false,"types":[]},{"text":"impl Ord for Edition","synthetic":false,"types":[]},{"text":"impl Ord for InternedString","synthetic":false,"types":[]},{"text":"impl Ord for TargetKind","synthetic":false,"types":[]},{"text":"impl Ord for Target","synthetic":false,"types":[]},{"text":"impl Ord for TargetSourcePath","synthetic":false,"types":[]},{"text":"impl Ord for Package","synthetic":false,"types":[]},{"text":"impl Ord for PackageId","synthetic":false,"types":[]},{"text":"impl Ord for PackageIdSpec","synthetic":false,"types":[]},{"text":"impl Ord for ProfileRoot","synthetic":false,"types":[]},{"text":"impl Ord for Profile","synthetic":false,"types":[]},{"text":"impl Ord for Lto","synthetic":false,"types":[]},{"text":"impl Ord for PanicStrategy","synthetic":false,"types":[]},{"text":"impl Ord for Strip","synthetic":false,"types":[]},{"text":"impl Ord for UnitFor","synthetic":false,"types":[]},{"text":"impl Ord for EncodableDependency","synthetic":false,"types":[]},{"text":"impl Ord for EncodablePackageId","synthetic":false,"types":[]},{"text":"impl Ord for ResolveVersion","synthetic":false,"types":[]},{"text":"impl Ord for GitReference","synthetic":false,"types":[]},{"text":"impl Ord for SourceId","synthetic":false,"types":[]},{"text":"impl Ord for Node","synthetic":false,"types":[]},{"text":"impl Ord for CanonicalUrl","synthetic":false,"types":[]},{"text":"impl Ord for CommandInfo","synthetic":false,"types":[]},{"text":"impl Ord for ProfilePackageSpec","synthetic":false,"types":[]}];
implementors["cargo_metadata"] = [{"text":"impl Ord for PackageId","synthetic":false,"types":[]}];
implementors["cargo_platform"] = [{"text":"impl Ord for CfgExpr","synthetic":false,"types":[]},{"text":"impl Ord for Cfg","synthetic":false,"types":[]},{"text":"impl Ord for Platform","synthetic":false,"types":[]}];
implementors["cfg_expr"] = [{"text":"impl Ord for Func","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Ord for NaiveDate","synthetic":false,"types":[]},{"text":"impl Ord for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Ord for IsoWeek","synthetic":false,"types":[]},{"text":"impl Ord for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Ord for Date&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Ord for DateTime&lt;Tz&gt;","synthetic":false,"types":[]}];
implementors["combine"] = [{"text":"impl Ord for SourcePosition","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Ord&gt; Ord for PartialStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Ord + 'a&gt; Ord for SliceStream&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Ord for PointerOffset","synthetic":false,"types":[]}];
implementors["console"] = [{"text":"impl Ord for Attribute","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable, '_&gt; Ord for Shared&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["determinator"] = [{"text":"impl Ord for Paths0","synthetic":false,"types":[]},{"text":"impl Ord for RuleIndex","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Ord, R:&nbsp;Ord&gt; Ord for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["filetime"] = [{"text":"impl Ord for FileTime","synthetic":false,"types":[]}];
implementors["fixedbitset"] = [{"text":"impl Ord for FixedBitSet","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl Ord for Sort","synthetic":false,"types":[]},{"text":"impl Ord for CredentialType","synthetic":false,"types":[]},{"text":"impl Ord for IndexEntryFlag","synthetic":false,"types":[]},{"text":"impl Ord for IndexEntryExtendedFlag","synthetic":false,"types":[]},{"text":"impl Ord for IndexAddOption","synthetic":false,"types":[]},{"text":"impl Ord for RepositoryOpenFlags","synthetic":false,"types":[]},{"text":"impl Ord for RevparseMode","synthetic":false,"types":[]},{"text":"impl Ord for MergeAnalysis","synthetic":false,"types":[]},{"text":"impl Ord for MergePreference","synthetic":false,"types":[]},{"text":"impl Ord for Oid","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Ord for Reference&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Time","synthetic":false,"types":[]},{"text":"impl Ord for IndexTime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for TreeEntry&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Status","synthetic":false,"types":[]},{"text":"impl Ord for RepositoryInitMode","synthetic":false,"types":[]},{"text":"impl Ord for SubmoduleStatus","synthetic":false,"types":[]},{"text":"impl Ord for PathspecFlags","synthetic":false,"types":[]},{"text":"impl Ord for CheckoutNotificationType","synthetic":false,"types":[]},{"text":"impl Ord for DiffStatsFormat","synthetic":false,"types":[]},{"text":"impl Ord for StashApplyFlags","synthetic":false,"types":[]},{"text":"impl Ord for StashFlags","synthetic":false,"types":[]},{"text":"impl Ord for AttrCheckFlags","synthetic":false,"types":[]},{"text":"impl Ord for DiffFlags","synthetic":false,"types":[]},{"text":"impl Ord for ReferenceFormat","synthetic":false,"types":[]}];
implementors["glob"] = [{"text":"impl Ord for Pattern","synthetic":false,"types":[]},{"text":"impl Ord for MatchOptions","synthetic":false,"types":[]}];
implementors["guppy"] = [{"text":"impl Ord for FeatureGraphWarning","synthetic":false,"types":[]},{"text":"impl Ord for FeatureBuildStage","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Ord for BuildTargetId&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Ord for BuildTargetKind&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'g&gt; Ord for FeatureId&lt;'g&gt;","synthetic":false,"types":[]},{"text":"impl Ord for FeatureType","synthetic":false,"types":[]},{"text":"impl Ord for EnabledTernary","synthetic":false,"types":[]},{"text":"impl Ord for PackageId","synthetic":false,"types":[]}];
implementors["guppy_summaries"] = [{"text":"impl Ord for SummaryDiffTag","synthetic":false,"types":[]},{"text":"impl Ord for SummaryId","synthetic":false,"types":[]},{"text":"impl Ord for SummarySource","synthetic":false,"types":[]},{"text":"impl Ord for PackageStatus","synthetic":false,"types":[]}];
implementors["im_rc"] = [{"text":"impl&lt;K, V&gt; Ord for OrdMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Ord,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Ord&gt; Ord for OrdSet&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; Ord for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Hash + Eq + Ord + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Ord + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, S&gt; Ord for HashSet&lt;A, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Hash + Eq + Clone + Ord,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + Ord&gt; Ord for Vector&lt;A&gt;","synthetic":false,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K:&nbsp;Hash + Eq + Ord, V:&nbsp;Ord, S:&nbsp;BuildHasher&gt; Ord for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Ord for Level","synthetic":false,"types":[]},{"text":"impl Ord for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for Metadata&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Ord for MetadataBuilder&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Ord for BigNumRef","synthetic":false,"types":[]},{"text":"impl Ord for BigNum","synthetic":false,"types":[]},{"text":"impl Ord for CMSOptions","synthetic":false,"types":[]},{"text":"impl Ord for OcspFlag","synthetic":false,"types":[]},{"text":"impl Ord for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl Ord for SslOptions","synthetic":false,"types":[]},{"text":"impl Ord for SslMode","synthetic":false,"types":[]},{"text":"impl Ord for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl Ord for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl Ord for ExtensionContext","synthetic":false,"types":[]},{"text":"impl Ord for ShutdownState","synthetic":false,"types":[]},{"text":"impl Ord for X509CheckFlags","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl&lt;'i&gt; Ord for Position&lt;'i&gt;","synthetic":false,"types":[]}];
implementors["petgraph"] = [{"text":"impl Ord for Time","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Ord&gt; Ord for NodeIndex&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Ord&gt; Ord for EdgeIndex&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'b, T&gt; Ord for Ptr&lt;'b, T&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Direction","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Ord for Ident","synthetic":false,"types":[]}];
implementors["proptest"] = [{"text":"impl Ord for PersistedSeed","synthetic":false,"types":[]},{"text":"impl Ord for Reason","synthetic":false,"types":[]},{"text":"impl Ord for StringParam","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Ord for Span","synthetic":false,"types":[]},{"text":"impl Ord for Position","synthetic":false,"types":[]},{"text":"impl Ord for Literal","synthetic":false,"types":[]},{"text":"impl Ord for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Ord for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Ord for Utf8Range","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl Ord for Identifier","synthetic":false,"types":[]},{"text":"impl Ord for Version","synthetic":false,"types":[]},{"text":"impl Ord for VersionReq","synthetic":false,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Ord for RangeSet","synthetic":false,"types":[]},{"text":"impl Ord for Compat","synthetic":false,"types":[]},{"text":"impl Ord for Range","synthetic":false,"types":[]},{"text":"impl Ord for Comparator","synthetic":false,"types":[]},{"text":"impl Ord for Op","synthetic":false,"types":[]},{"text":"impl Ord for Identifier","synthetic":false,"types":[]},{"text":"impl&lt;'input&gt; Ord for Token&lt;'input&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Error","synthetic":false,"types":[]},{"text":"impl&lt;'input&gt; Ord for Error&lt;'input&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Version","synthetic":false,"types":[]},{"text":"impl Ord for Identifier","synthetic":false,"types":[]}];
implementors["sized_chunks"] = [{"text":"impl&lt;A, T&gt; Ord for InlineArray&lt;A, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, N&gt; Ord for Chunk&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Ord,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ChunkLength&lt;A&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Ord for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Ord,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["supercow"] = [{"text":"impl&lt;'a, OWNED, BORROWED:&nbsp;?Sized, SHARED, STORAGE, PTR&gt; Ord for Supercow&lt;'a, OWNED, BORROWED, SHARED, STORAGE, PTR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BORROWED: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;*const BORROWED: PointerFirstRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;STORAGE: OwnedStorage&lt;OWNED, SHARED&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;PTR: PtrWrite&lt;BORROWED&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;BORROWED: Ord,<br>&nbsp;&nbsp;&nbsp;&nbsp;PTR: PtrRead&lt;BORROWED&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Ord for Lifetime","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Ord for Duration","synthetic":false,"types":[]},{"text":"impl Ord for Timespec","synthetic":false,"types":[]},{"text":"impl Ord for SteadyTime","synthetic":false,"types":[]},{"text":"impl Ord for Tm","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Ord for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Ord,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Ord for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Ord,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["toml_edit"] = [{"text":"impl Ord for Key","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Ord for B0","synthetic":false,"types":[]},{"text":"impl Ord for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Ord + Unsigned + NonZero&gt; Ord for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Ord + Unsigned + NonZero&gt; Ord for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Z0","synthetic":false,"types":[]},{"text":"impl Ord for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Ord, B:&nbsp;Ord&gt; Ord for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Ord for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Ord, A:&nbsp;Ord&gt; Ord for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Greater","synthetic":false,"types":[]},{"text":"impl Ord for Less","synthetic":false,"types":[]},{"text":"impl Ord for Equal","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Ord for Level","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S:&nbsp;Ord&gt; Ord for Host&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Ord for Url","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Ord&gt; Ord for VecMap&lt;V&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()