(function() {var implementors = {};
implementors["anyhow"] = [{"text":"impl Drop for Error","synthetic":false,"types":[]}];
implementors["cargo"] = [{"text":"impl&lt;'a, 'cfg&gt; Drop for Downloads&lt;'a, 'cfg&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Drop for PackageCacheLock&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl Drop for StartedServer","synthetic":false,"types":[]},{"text":"impl Drop for FileLock","synthetic":false,"types":[]},{"text":"impl Drop for LockServer","synthetic":false,"types":[]},{"text":"impl Drop for LockServerStarted","synthetic":false,"types":[]},{"text":"impl Drop for Profiler","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Drop for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; Drop for SelectedOperation&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Drop for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Drop for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for LocalHandle","synthetic":false,"types":[]},{"text":"impl Drop for Guard","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;?Sized, '_&gt; Drop for ShardedLockWriteGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for WaitGroup","synthetic":false,"types":[]}];
implementors["curl"] = [{"text":"impl Drop for Form","synthetic":false,"types":[]},{"text":"impl&lt;'easy, 'data&gt; Drop for Transfer&lt;'easy, 'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;H&gt; Drop for Easy2&lt;H&gt;","synthetic":false,"types":[]},{"text":"impl Drop for List","synthetic":false,"types":[]},{"text":"impl Drop for Multi","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl&lt;W:&nbsp;Write&gt; Drop for GzEncoder&lt;W&gt;","synthetic":false,"types":[]}];
implementors["git2"] = [{"text":"impl Drop for OidArray","synthetic":false,"types":[]},{"text":"impl Drop for StringArray","synthetic":false,"types":[]},{"text":"impl Drop for Transport","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Blame&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Blob&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for BlobWriter&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Branches&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl Drop for Buf","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Commit&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl Drop for Config","synthetic":false,"types":[]},{"text":"impl&lt;'cfg&gt; Drop for ConfigEntries&lt;'cfg&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'cfg&gt; Drop for ConfigEntry&lt;'cfg&gt;","synthetic":false,"types":[]},{"text":"impl Drop for Cred","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Describe&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Diff&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl Drop for DiffStats","synthetic":false,"types":[]},{"text":"impl Drop for Index","synthetic":false,"types":[]},{"text":"impl&lt;'index&gt; Drop for IndexConflicts&lt;'index&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for AnnotatedCommit&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Note&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Notes&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Object&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Odb&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for OdbObject&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for OdbReader&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for OdbWriter&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for OdbPackwriter&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for PackBuilder&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'buffers&gt; Drop for Patch&lt;'buffers&gt;","synthetic":false,"types":[]},{"text":"impl Drop for Pathspec","synthetic":false,"types":[]},{"text":"impl&lt;'ps&gt; Drop for PathspecMatchList&lt;'ps&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Rebase&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Reference&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for References&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl Drop for Reflog","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Remote&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo, 'connection, 'cb&gt; Drop for RemoteConnection&lt;'repo, 'connection, 'cb&gt;","synthetic":false,"types":[]},{"text":"impl Drop for Repository","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Revwalk&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for Signature&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Statuses&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Submodule&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Tag&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for Tree&lt;'repo&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for TreeEntry&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'repo&gt; Drop for TreeBuilder&lt;'repo&gt;","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Drop for RawTable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for RawIntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Drop for RawDrain&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Drop for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;K, &amp;mut V) -&gt; bool,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, F&gt; Drop for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;K) -&gt; bool,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;'a, K, I, F&gt; Drop for Group&lt;'a, K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: 'a,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, I&gt; Drop for Chunk&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: 'a,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["jobserver"] = [{"text":"impl Drop for Acquired","synthetic":false,"types":[]},{"text":"impl Drop for HelperThread","synthetic":false,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; Drop for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Drop for IntoIter&lt;K, V&gt;","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Drop for Asn1GeneralizedTime","synthetic":false,"types":[]},{"text":"impl Drop for Asn1Time","synthetic":false,"types":[]},{"text":"impl Drop for Asn1String","synthetic":false,"types":[]},{"text":"impl Drop for Asn1Integer","synthetic":false,"types":[]},{"text":"impl Drop for Asn1BitString","synthetic":false,"types":[]},{"text":"impl Drop for Asn1Object","synthetic":false,"types":[]},{"text":"impl Drop for BigNumContext","synthetic":false,"types":[]},{"text":"impl Drop for BigNum","synthetic":false,"types":[]},{"text":"impl Drop for CmsContentInfo","synthetic":false,"types":[]},{"text":"impl Drop for Conf","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Dh&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Dsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for EcGroup","synthetic":false,"types":[]},{"text":"impl Drop for EcPoint","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for EcKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for EcdsaSig","synthetic":false,"types":[]},{"text":"impl Drop for Seal","synthetic":false,"types":[]},{"text":"impl Drop for Open","synthetic":false,"types":[]},{"text":"impl Drop for Hasher","synthetic":false,"types":[]},{"text":"impl Drop for OcspBasicResponse","synthetic":false,"types":[]},{"text":"impl Drop for OcspCertId","synthetic":false,"types":[]},{"text":"impl Drop for OcspResponse","synthetic":false,"types":[]},{"text":"impl Drop for OcspRequest","synthetic":false,"types":[]},{"text":"impl Drop for OcspOneReq","synthetic":false,"types":[]},{"text":"impl Drop for Pkcs12","synthetic":false,"types":[]},{"text":"impl Drop for Pkcs7","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for PKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Rsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for Signer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for Verifier&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Drop for SrtpProtectionProfile","synthetic":false,"types":[]},{"text":"impl Drop for SslContext","synthetic":false,"types":[]},{"text":"impl Drop for SslSession","synthetic":false,"types":[]},{"text":"impl Drop for Ssl","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; Drop for SslStream&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Stackable&gt; Drop for Stack&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Stackable&gt; Drop for IntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for OpensslString","synthetic":false,"types":[]},{"text":"impl Drop for Crypter","synthetic":false,"types":[]},{"text":"impl Drop for X509VerifyParam","synthetic":false,"types":[]},{"text":"impl Drop for X509StoreBuilder","synthetic":false,"types":[]},{"text":"impl Drop for X509Store","synthetic":false,"types":[]},{"text":"impl Drop for X509StoreContext","synthetic":false,"types":[]},{"text":"impl Drop for X509","synthetic":false,"types":[]},{"text":"impl Drop for X509Extension","synthetic":false,"types":[]},{"text":"impl Drop for X509Name","synthetic":false,"types":[]},{"text":"impl Drop for X509NameEntry","synthetic":false,"types":[]},{"text":"impl Drop for X509Req","synthetic":false,"types":[]},{"text":"impl Drop for GeneralName","synthetic":false,"types":[]},{"text":"impl Drop for X509Algorithm","synthetic":false,"types":[]},{"text":"impl Drop for X509Object","synthetic":false,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;'a, T:&nbsp;Ord + Send&gt; Drop for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Drop for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for Drain&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Send&gt; Drop for Drain&lt;'data, T&gt;","synthetic":false,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Drop for ThreadPool","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Drop for Ast","synthetic":false,"types":[]},{"text":"impl Drop for ClassSet","synthetic":false,"types":[]},{"text":"impl Drop for Hir","synthetic":false,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Drop for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["sized_chunks"] = [{"text":"impl&lt;A, T&gt; Drop for InlineArray&lt;A, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A, N&gt; Drop for Chunk&lt;A, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ChunkLength&lt;A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, N:&nbsp;Bits + ChunkLength&lt;A&gt;&gt; Drop for SparseChunk&lt;A, N&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T:&nbsp;'a + Array&gt; Drop for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for SmallVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for IntoIter&lt;A&gt;","synthetic":false,"types":[]}];
implementors["supercow"] = [{"text":"impl&lt;'a, OWNED, BORROWED:&nbsp;?Sized, SHARED, STORAGE, PTR&gt; Drop for Supercow&lt;'a, OWNED, BORROWED, SHARED, STORAGE, PTR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;BORROWED: 'a,<br>&nbsp;&nbsp;&nbsp;&nbsp;*const BORROWED: PointerFirstRef,<br>&nbsp;&nbsp;&nbsp;&nbsp;STORAGE: OwnedStorage&lt;OWNED, SHARED&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;PTR: PtrWrite&lt;BORROWED&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, P&gt; Drop for Ref&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefParent + 'a,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;'a&gt; Drop for ParseBuffer&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["tar"] = [{"text":"impl&lt;W:&nbsp;Write&gt; Drop for Builder&lt;W&gt;","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl Drop for TempDir","synthetic":false,"types":[]},{"text":"impl Drop for TempPath","synthetic":false,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T:&nbsp;Send&gt; Drop for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;'p, A:&nbsp;Array&gt; Drop for ArrayVecDrain&lt;'p, A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'p, A:&nbsp;Array&gt; Drop for TinyVecDrain&lt;'p, A&gt;","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;'a&gt; Drop for PathSegmentsMut&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for UrlQuery&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z&gt; Drop for Zeroizing&lt;Z&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z: Zeroize,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()